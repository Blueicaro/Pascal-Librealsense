var tipuesearch = {"pages": [
     {"title": "rs", "text": "Exposes librealsense functionality   ", "tags": "", "url": "rs.html"},
     {"title": "rs.RS2_API_MAJOR_VERSION", "text": "typedef double rs2_time_t; /**&lt; Timestamp format. units are milliseconds */ typedef long long rs2_metadata_type; /**&lt; Metadata attribute type is defined as 64 bit signed integer*/   ", "tags": "", "url": "rs.html#RS2_API_MAJOR_VERSION"},
     {"title": "rs.RS2_API_MINOR_VERSION", "text": "   ", "tags": "", "url": "rs.html#RS2_API_MINOR_VERSION"},
     {"title": "rs.RS2_API_PATCH_VERSION", "text": "   ", "tags": "", "url": "rs.html#RS2_API_PATCH_VERSION"},
     {"title": "rs.RS2_API_BUILD_VERSION", "text": "   ", "tags": "", "url": "rs.html#RS2_API_BUILD_VERSION"},
     {"title": "rs.RS2_API_VERSION", "text": "   ", "tags": "", "url": "rs.html#RS2_API_VERSION"},
     {"title": "rs.RS2_API_VERSION_STR", "text": "    ", "tags": "", "url": "rs.html#RS2_API_VERSION_STR"},
     {"title": "rs.RS2_API_FULL_VERSION_STR", "text": "    ", "tags": "", "url": "rs.html#RS2_API_FULL_VERSION_STR"},
     {"title": "rs_config", "text": "Exposes RealSense processing-block functionality   ", "tags": "", "url": "rs_config.html"},
     {"title": "rs_config.RS2_DEFAULT_TIMEOUT", "text": "   ", "tags": "", "url": "rs_config.html#RS2_DEFAULT_TIMEOUT"},
     {"title": "rs_config.rs2_create_config", "text": "Create a config instance The config allows pipeline users to request filters for the pipeline streams and device selection and configuration. This is an optional step in pipeline creation, as the pipeline resolves its streaming device internally. Config provides its users a way to set the filters and test if there is no conflict with the pipeline requirements from the device. It also allows the user to find a matching device for the config filters and the pipeline, in order to select a device explicitly, and modify its controls before streaming starts.    param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return rs2_config* A pointer to a new config instance    ", "tags": "", "url": "rs_config.html#rs2_create_config"},
     {"title": "rs_config.rs2_delete_config", "text": "Deletes an instance of a config param[in] config A pointer to an instance of a config    ", "tags": "", "url": "rs_config.html#rs2_delete_config"},
     {"title": "rs_config.rs2_config_enable_stream", "text": "Enable a device stream explicitly, with selected stream parameters. The method allows the application to request a stream with specific configuration. If no stream is explicitly enabled, the pipeline configures the device and its streams according to the attached computer vision modules and processing blocks requirements, or default configuration for the first available device. The application can configure any of the input stream parameters according to its requirement, or set to 0 for don't care value. The config accumulates the application calls for enable configuration methods, until the configuration is applied. Multiple enable stream calls for the same stream with conflicting parameters override each other, and the last call is maintained. Upon calling \\c resolve(), the config checks for conflicts between the application configuration requests and the attached computer vision modules and processing blocks requirements, and fails if conflicts are found. Before \\c resolve() is called, no conflict check is done.    param[in] config A pointer to an instance of a config param[in] stream Stream type to be enabled param[in] index Stream index, used for multiple streams of the same type. -1 indicates any. param[in] width Stream image width - for images streams. 0 indicates any. param[in] height Stream image height - for images streams. 0 indicates any. param[in] format Stream data format - pixel format for images streams, of data type for other streams. RS2_FORMAT_ANY indicates any. param[in] framerate Stream frames per second. 0 indicates any. param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_enable_stream"},
     {"title": "rs_context", "text": "Exposes RealSense context functionality   ", "tags": "", "url": "rs_context.html"},
     {"title": "rs_context.RS2_PRODUCT_LINE_ANY", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_ANY"},
     {"title": "rs_context.RS2_PRODUCT_LINE_ANY_INTEL", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_ANY_INTEL"},
     {"title": "rs_context.RS2_PRODUCT_LINE_NON_INTEL", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_NON_INTEL"},
     {"title": "rs_context.RS2_PRODUCT_LINE_D400", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_D400"},
     {"title": "rs_context.RS2_PRODUCT_LINE_SR300", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_SR300"},
     {"title": "rs_context.RS2_PRODUCT_LINE_L500", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_L500"},
     {"title": "rs_context.RS2_PRODUCT_LINE_T200", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_T200"},
     {"title": "rs_context.RS2_PRODUCT_LINE_DEPTH", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_DEPTH"},
     {"title": "rs_context.RS2_PRODUCT_LINE_TRACKING", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_TRACKING"},
     {"title": "rs_context.rs2_create_context", "text": "brief Creates RealSense context that is required for the rest of the API. param[in] api_version Users are expected to pass their version of \\c RS2_API_VERSION to make sure they are running the correct librealsense version. param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored. return Context object    ", "tags": "", "url": "rs_context.html#rs2_create_context"},
     {"title": "rs_context.rs2_delete_context", "text": "brief Frees the relevant context object. param[in] context Object that is no longer needed    ", "tags": "", "url": "rs_context.html#rs2_delete_context"},
     {"title": "rs_context.rs2_set_devices_changed_callback", "text": "/** * set callback to get devices changed events * these events will be raised by the context whenever new RealSense device is connected or existing device gets disconnected * \\param context Object representing librealsense session * \\param[in] callback function pointer to register as per-notifications callback * \\param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored */    ", "tags": "", "url": "rs_context.html#rs2_set_devices_changed_callback"},
     {"title": "rs_context.rs2_context_add_device", "text": "Create a new device and add it to the context \\param ctx The context to which the new device will be added \\param file The file from which the device should be created \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored     A pointer to a device that plays data from the file, or null in case of failure", "tags": "", "url": "rs_context.html#rs2_context_add_device"},
     {"title": "rs_context.rs2_context_add_software_device", "text": "Add an instance of software device to the context param ctx The context to which the new device will be added param dev Instance of software device to register into the context param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_context.html#rs2_context_add_software_device"},
     {"title": "rs_context.rs2_context_remove_device", "text": "Removes a playback device from the context, if exists \\param[in] ctx The context from which the device should be removed \\param[in] file The file name that was used to add the device \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_context.html#rs2_context_remove_device"},
     {"title": "rs_context.rs2_context_unload_tracking_module", "text": "Removes tracking module. function query_devices() locks the tracking module in the tm_context object. If the tracking module device is not used it should be removed using this function, so that other applications could find it. This function can be used both before the call to query_device() to prevent enabling tracking modules or afterwards to release them.    ", "tags": "", "url": "rs_context.html#rs2_context_unload_tracking_module"},
     {"title": "rs_context.rs2_query_devices", "text": "create a static snapshot of all connected devices at the time of the call \\param context Object representing librealsense session \\param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored \\return the list of devices, should be released by rs2_delete_device_list    ", "tags": "", "url": "rs_context.html#rs2_query_devices"},
     {"title": "rs_context.rs2_query_devices_ex", "text": "create a static snapshot of all connected devices at the time of the call \\param context Object representing librealsense session \\param product_mask Controls what kind of devices will be returned \\param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored \\return the list of devices, should be released by rs2_delete_device_list    ", "tags": "", "url": "rs_context.html#rs2_query_devices_ex"},
     {"title": "rs_context.rs2_create_device_hub", "text": "brief Creates RealSense device_hub . \\param[in] context The context for the device hub \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored. \\return Device hub object    ", "tags": "", "url": "rs_context.html#rs2_create_device_hub"},
     {"title": "rs_context.rs2_device_hub_wait_for_device", "text": "If any device is connected return it, otherwise wait until next RealSense device connects. Calling this method multiple times will cycle through connected devices \\param[in] ctx The context to creat the device \\param[in] hub The device hub object \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored. \\return device object    ", "tags": "", "url": "rs_context.html#rs2_device_hub_wait_for_device"},
     {"title": "rs_context.rs2_device_hub_is_device_connected", "text": "Checks if device is still connected \\param[in] hub The device hub object \\param[in] device The device \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored. \\return 1 if the device is connected, 0 otherwise    ", "tags": "", "url": "rs_context.html#rs2_device_hub_is_device_connected"},
     {"title": "rs_device", "text": "Exposes RealSense device functionality   ", "tags": "", "url": "rs_device.html"},
     {"title": "rs_device.rs2_get_device_count", "text": "Determines number of devices in a list. param[in] info_list The list of connected devices captured using rs2_query_devices param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Device count    ", "tags": "", "url": "rs_device.html#rs2_get_device_count"},
     {"title": "rs_device.rs2_delete_device_list", "text": "Deletes device list, any devices created using this list will remain unaffected. param[in] info_list List to delete    ", "tags": "", "url": "rs_device.html#rs2_delete_device_list"},
     {"title": "rs_device.rs2_create_device", "text": "Creates a device by index. The device object represents a physical camera and provides the means to manipulate it. param[in] info_list the list containing the device to retrieve param[in] index The zero based index of device to retrieve param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return The requested device, should be released by rs2_delete_device    ", "tags": "", "url": "rs_device.html#rs2_create_device"},
     {"title": "rs_device.rs2_delete_device", "text": "Delete RealSense device param[in] device Realsense device to delete    ", "tags": "", "url": "rs_device.html#rs2_delete_device"},
     {"title": "rs_device.rs2_get_device_info", "text": "Retrieve camera specific information, like versions of various internal components. param[in] device The RealSense device param[in] info Camera info type to retrieve param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return The requested camera info string, in a format specific to the device model    ", "tags": "", "url": "rs_device.html#rs2_get_device_info"},
     {"title": "rs_frame", "text": "Exposes RealSense frame functionality   ", "tags": "", "url": "rs_frame.html"},
     {"title": "rs_frame.rs2_timestamp_domain_to_string", "text": "    ", "tags": "", "url": "rs_frame.html#rs2_timestamp_domain_to_string"},
     {"title": "rs_frame.rs2_frame_metadata_to_string", "text": "    ", "tags": "", "url": "rs_frame.html#rs2_frame_metadata_to_string"},
     {"title": "rs_frame.rs2_frame_metadata_value_to_string", "text": "    ", "tags": "", "url": "rs_frame.html#rs2_frame_metadata_value_to_string"},
     {"title": "rs_frame.rs2_extract_frame", "text": "Extract frame from within a composite frame param[in] composite Composite frame param[in] index Index of the frame to extract within the composite frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return returns reference to a frame existing within the composite frame If you wish to keep this frame after the composite is released, you need to call acquire_ref Otherwise the resulting frame lifetime is bound by owning composite frame    ", "tags": "", "url": "rs_frame.html#rs2_extract_frame"},
     {"title": "rs_frame.rs2_embedded_frames_count", "text": "Get number of frames embedded within a composite frame param[in] composite Composite input frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Number of embedded frames    ", "tags": "", "url": "rs_frame.html#rs2_embedded_frames_count"},
     {"title": "rs_frame.rs2_release_frame", "text": "relases the frame handle param[in] frame handle returned from a callback    ", "tags": "", "url": "rs_frame.html#rs2_release_frame"},
     {"title": "rs_frame.rs2_get_frame_data_size", "text": "retrieve data size from frame handle param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the size of the frame data    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_data_size"},
     {"title": "rs_frame.rs2_get_frame_data", "text": "retrieve data from frame handle param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the pointer to the start of the frame data    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_data"},
     {"title": "rs_frame.rs2_get_frame_number", "text": "retrieve frame number from frame handle param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the frame nubmer of the frame, in milliseconds since the device was started    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_number"},
     {"title": "rs_frame.rs2_get_frame_timestamp_domain", "text": "retrieve timestamp domain from frame handle. timestamps can only be comparable if they are in common domain (for example, depth timestamp might come from system time while color timestamp might come from the device) this method is used to check if two timestamp values are comparable (generated from the same clock) param[in] frameset handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the timestamp domain of the frame (camera / microcontroller / system time)    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_timestamp_domain"},
     {"title": "rs_frame.rs2_get_frame_timestamp", "text": "retrieve timestamp from frame handle in milliseconds param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the timestamp of the frame in milliseconds    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_timestamp"},
     {"title": "rs_frame.rs2_get_frame_metadata", "text": "/** * retrieve metadata from frame handle * \\param[in] frame handle returned from a callback * \\param[in] frame_metadata the rs2_frame_metadata whose latest frame we are interested in * \\param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored * \\return the metadata value */ rs2_metadata_type rs2_get_frame_metadata(const rs2_frame* frame, rs2_frame_metadata_value frame_metadata, rs2_error** error);    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_metadata"},
     {"title": "rs_frame.rs2_timestamp_domain", "text": "Specifies the clock in relation to which the frame timestamp was measured. */    RS2_TIMESTAMP_DOMAIN_HARDWARE_CLOCK, /**&lt; Frame timestamp was measured in relation to the camera clock */ RS2_TIMESTAMP_DOMAIN_SYSTEM_TIME, /**&lt; Frame timestamp was measured in relation to the OS system clock */ RS2_TIMESTAMP_DOMAIN_GLOBAL_TIME, /**&lt; Frame timestamp was measured in relation to the camera clock and converted to OS system clock by constantly measure the difference*/ RS2_TIMESTAMP_DOMAIN_COUNT /**&lt; Number of enumeration values. Not a valid input: intended to be used in for-loops. */    RS2_TIMESTAMP_DOMAIN_HARDWARE_CLOCK  Frame timestamp was measured in relation to the camera clock  RS2_TIMESTAMP_DOMAIN_SYSTEM_TIME  Frame timestamp was measured in relation to the OS system clock  RS2_TIMESTAMP_DOMAIN_GLOBAL_TIME  Frame timestamp was measured in relation to the camera clock and converted to OS system clock by constantly measure the difference  RS2_TIMESTAMP_DOMAIN_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. ", "tags": "", "url": "rs_frame.html#rs2_timestamp_domain"},
     {"title": "rs_frame.rs2_frame_metadata_value", "text": "Per-Frame-Metadata is the set of read-only properties that might be exposed for each individual frame. */    RS2_FRAME_METADATA_FRAME_COUNTER  A sequential index managed per-stream. Integer value  RS2_FRAME_METADATA_FRAME_TIMESTAMP  Timestamp set by device clock when data readout and transmit commence. usec  RS2_FRAME_METADATA_SENSOR_TIMESTAMP  Timestamp of the middle of sensor's exposure calculated by device. usec  RS2_FRAME_METADATA_ACTUAL_EXPOSURE  Sensor's exposure width. When Auto Exposure (AE) is on the value is controlled by firmware. usec  RS2_FRAME_METADATA_GAIN_LEVEL  A relative value increasing which will increase the Sensor's gain fctor. When AE is set On, the value is controlled by firmware. Integer value  RS2_FRAME_METADATA_AUTO_EXPOSURE  Auto Exposure Mode indicator. Zero corresponds to AE switched off.  RS2_FRAME_METADATA_WHITE_BALANCE  White Balance setting as a color temperature. Kelvin degrees  RS2_FRAME_METADATA_TIME_OF_ARRIVAL  Time of arrival in system clock  RS2_FRAME_METADATA_TEMPERATURE  Temperature of the device, measured at the time of the frame capture. Celsius degrees  RS2_FRAME_METADATA_BACKEND_TIMESTAMP  Timestamp get from uvc driver. usec  RS2_FRAME_METADATA_ACTUAL_FPS  Actual fps  RS2_FRAME_METADATA_FRAME_LASER_POWER  Laser power value 0-360.  RS2_FRAME_METADATA_FRAME_LASER_POWER_MODE  Laser power mode. Zero corresponds to Laser power switched off and one for switched on. deprecated, replaced by RS2_FRAME_METADATA_FRAME_EMITTER_MODE  RS2_FRAME_METADATA_EXPOSURE_PRIORITY  Exposure priority.  RS2_FRAME_METADATA_EXPOSURE_ROI_LEFT  Left region of interest for the auto exposure Algorithm.  RS2_FRAME_METADATA_EXPOSURE_ROI_RIGHT  Right region of interest for the auto exposure Algorithm.  RS2_FRAME_METADATA_EXPOSURE_ROI_TOP  Top region of interest for the auto exposure Algorithm.  RS2_FRAME_METADATA_EXPOSURE_ROI_BOTTOM  Bottom region of interest for the auto exposure Algorithm.  RS2_FRAME_METADATA_BRIGHTNESS  Color image brightness.  RS2_FRAME_METADATA_CONTRAST  Color image contrast.  RS2_FRAME_METADATA_SATURATION  Color image saturation.  RS2_FRAME_METADATA_SHARPNESS  Color image sharpness.  RS2_FRAME_METADATA_AUTO_WHITE_BALANCE_TEMPERATURE  Auto white balance temperature Mode indicator. Zero corresponds to automatic mode switched off.  RS2_FRAME_METADATA_BACKLIGHT_COMPENSATION  Color backlight compensation. Zero corresponds to switched off.  RS2_FRAME_METADATA_HUE  Color image hue.  RS2_FRAME_METADATA_GAMMA  Color image gamma.  RS2_FRAME_METADATA_MANUAL_WHITE_BALANCE  Color image white balance.  RS2_FRAME_METADATA_POWER_LINE_FREQUENCY  Power Line Frequency for anti-flickering Off/50Hz/60Hz/Auto.  RS2_FRAME_METADATA_LOW_LIGHT_COMPENSATION  Color lowlight compensation. Zero corresponds to switched off.  RS2_FRAME_METADATA_FRAME_EMITTER_MODE  Emitter mode: 0 - all emitters disabled. 1 - laser enabled. 2 - auto laser enabled (opt). 3 - LED enabled (opt).  RS2_FRAME_METADATA_FRAME_LED_POWER  Led power value 0-360.  RS2_FRAME_METADATA_RAW_FRAME_SIZE  The number of transmitted payload bytes, not including metadata */  RS2_FRAME_METADATA_GPIO_INPUT_DATA  GPIO input data  RS2_FRAME_METADATA_SEQUENCE_NAME  sub-preset id  RS2_FRAME_METADATA_SEQUENCE_ID  sub-preset sequence id  RS2_FRAME_METADATA_SEQUENCE_SIZE  sub-preset sequence size  RS2_FRAME_METADATA_COUNT   ", "tags": "", "url": "rs_frame.html#rs2_frame_metadata_value"},
     {"title": "rs_pipeline", "text": "Exposes RealSense processing-block functionality   ", "tags": "", "url": "rs_pipeline.html"},
     {"title": "rs_pipeline.rs2_create_pipeline", "text": "Create a pipeline instance The pipeline simplifies the user interaction with the device and computer vision processing modules. The class abstracts the camera configuration and streaming, and the vision modules triggering and threading. It lets the application focus on the computer vision output of the modules, or the device output data. The pipeline can manage computer vision modules, which are implemented as a processing blocks. The pipeline is the consumer of the processing block interface, while the application consumes the computer vision interface. param[in] ctx context param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_pipeline.html#rs2_create_pipeline"},
     {"title": "rs_pipeline.rs2_pipeline_stop", "text": "Stop the pipeline streaming. The pipeline stops delivering samples to the attached computer vision modules and processing blocks, stops the device streaming and releases the device resources used by the pipeline. It is the application's responsibility to release any frame reference it owns. The method takes effect only after \\c start() was called, otherwise an exception is raised. param[in] pipe pipeline param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_stop"},
     {"title": "rs_pipeline.rs2_delete_pipeline", "text": "Delete a pipeline instance. Upon destruction, the pipeline will implicitly stop itself param[in] pipe to delete    ", "tags": "", "url": "rs_pipeline.html#rs2_delete_pipeline"},
     {"title": "rs_pipeline.rs2_pipeline_start_with_config", "text": "Start the pipeline streaming according to the configuraion. The pipeline streaming loop captures samples from the device, and delivers them to the attached computer vision modules and processing blocks, according to each module requirements and threading model. During the loop execution, the application can access the camera streams by calling \\c wait_for_frames() or \\c poll_for_frames(). The streaming loop runs until the pipeline is stopped. Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised. The pipeline selects and activates the device upon start, according to configuration or a default configuration. When the rs2::config is provided to the method, the pipeline tries to activate the config \\c resolve() result. If the application requests are conflicting with pipeline computer vision modules or no matching device is available on the platform, the method fails. Available configurations and devices may change between config \\c resolve() call and pipeline start, in case devices are connected or disconnected, or another application acquires ownership of a device.    param[in] pipe a pointer to an instance of the pipeline param[in] config A rs2::config with requested filters on the pipeline configuration. By default no filters are applied. param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return The actual pipeline device and streams profile, which was successfully configured to the streaming device.    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_start_with_config"},
     {"title": "rs_pipeline.rs2_pipeline_wait_for_frames", "text": "Wait until a new set of frames becomes available. The frames set includes time-synchronized frames of each enabled stream in the pipeline. The method blocks the calling thread, and fetches the latest unread frames set. Device frames, which were produced while the function wasn't called, are dropped. To avoid frame drops, this method should be called as fast as the device frame rate. The application can maintain the frames handles to defer processing. However, if the application maintains too long history, the device may lack memory resources to produce new frames, and the following call to this method shall fail to retrieve new frames, until resources are retained. param[in] pipe the pipeline param[in] timeout_ms Max time in milliseconds to wait until an exception will be thrown param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return Set of coherent frames    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_wait_for_frames"},
     {"title": "rs_pipeline.rs2_delete_pipeline_profile", "text": "Deletes an instance of a pipeline profile    param[in] profile A pointer to an instance of a pipeline profile    ", "tags": "", "url": "rs_pipeline.html#rs2_delete_pipeline_profile"},
     {"title": "rs_sensor", "text": "Exposes RealSense sensor functionality   ", "tags": "", "url": "rs_sensor.html"},
     {"title": "rs_sensor.rs2_stream_to_string", "text": "    ", "tags": "", "url": "rs_sensor.html#rs2_stream_to_string"},
     {"title": "rs_sensor.rs2_format_to_string", "text": "    ", "tags": "", "url": "rs_sensor.html#rs2_format_to_string"},
     {"title": "rs_sensor.Trs2_camera_info", "text": "brief Read-only strings that can be queried from the device. Not all information attributes are available on all camera types. This information is mainly available for camera debug and troubleshooting and should not be used in applications.    RS2_CAMERA_INFO_NAME  Friendly name  RS2_CAMERA_INFO_SERIAL_NUMBER  Device serial number  RS2_CAMERA_INFO_FIRMWARE_VERSION  Primary firmware version  RS2_CAMERA_INFO_RECOMMENDED_FIRMWARE_VERSION  Recommended firmware version  RS2_CAMERA_INFO_PHYSICAL_PORT  Unique identifier of the port the device is connected to (platform specific)  RS2_CAMERA_INFO_DEBUG_OP_CODE  If device supports firmware logging,// this is the command to send to get logs from firmware  RS2_CAMERA_INFO_ADVANCED_MODE  True iff the device is in advanced mode  RS2_CAMERA_INFO_PRODUCT_ID  Product ID as reported in the USB descriptor  RS2_CAMERA_INFO_CAMERA_LOCKED  True iff EEPROM is locked  RS2_CAMERA_INFO_USB_TYPE_DESCRIPTOR  Designated USB specification: USB2/USB3  RS2_CAMERA_INFO_PRODUCT_LINE  Device product line D400/SR300/L500/T200  RS2_CAMERA_INFO_ASIC_SERIAL_NUMBER  ASIC serial number  RS2_CAMERA_INFO_FIRMWARE_UPDATE_ID  Firmware update ID  RS2_CAMERA_INFO_IP_ADDRESS  IP address for remote camera.  RS2_CAMERA_INFO_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. ", "tags": "", "url": "rs_sensor.html#Trs2_camera_info"},
     {"title": "rs_sensor.rs2_stream", "text": "brief Streams are different types of data provided by RealSense devices./    RS2_STREAM_ANY, RS2_STREAM_DEPTH , /**&lt; Native stream of depth data produced by RealSense device */ RS2_STREAM_COLOR , /**&lt; Native stream of color data captured by RealSense device */ RS2_STREAM_INFRARED , /**&lt; Native stream of infrared data captured by RealSense device */ RS2_STREAM_FISHEYE , /**&lt; Native stream of fish-eye (wide) data captured from the dedicate motion camera */ RS2_STREAM_GYRO , /**&lt; Native stream of gyroscope motion data produced by RealSense device */ RS2_STREAM_ACCEL , /**&lt; Native stream of accelerometer motion data produced by RealSense device */ RS2_STREAM_GPIO , /**&lt; Signals from external device connected through GPIO */ RS2_STREAM_POSE , /**&lt; 6 Degrees of Freedom pose data, calculated by RealSense device */ RS2_STREAM_CONFIDENCE , /**&lt; 4 bit per-pixel depth confidence level */ RS2_STREAM_COUNT    RS2_STREAM_ANY    RS2_STREAM_DEPTH  Native stream of depth data produced by RealSense device */  RS2_STREAM_COLOR  Native stream of color data captured by RealSense device */  RS2_STREAM_INFRARED  Native stream of infrared data captured by RealSense device */  RS2_STREAM_FISHEYE  Native stream of fish-eye (wide) data captured from the dedicate motion camera */  RS2_STREAM_GYRO  Native stream of gyroscope motion data produced by RealSense device */  RS2_STREAM_ACCEL  Native stream of accelerometer motion data produced by RealSense device */  RS2_STREAM_GPIO  Signals from external device connected through GPIO */  RS2_STREAM_POSE  6 Degrees of Freedom pose data, calculated by RealSense device */  RS2_STREAM_CONFIDENCE  4 bit per-pixel depth confidence level */  RS2_STREAM_COUNT   ", "tags": "", "url": "rs_sensor.html#rs2_stream"},
     {"title": "rs_sensor.rs2_format", "text": "brief A stream's format identifies how binary data is encoded within a frame. */ typedef enum rs2_format    RS2_FORMAT_ANY , //&lt; When passed to enable stream, librealsense will try to provide best suited format */ RS2_FORMAT_Z16 , //&lt; 16-bit linear depth values. The depth is meters is equal to depth scale * pixel value. */ RS2_FORMAT_DISPARITY16 , //&lt; 16-bit float-point disparity values. Depth-&gt;Disparity conversion : Disparity = Baseline*FocalLength/Depth. */ RS2_FORMAT_XYZ32F , //&lt; 32-bit floating point 3D coordinates. */ RS2_FORMAT_YUYV , //&lt; 32-bit y0, u, y1, v data for every two pixels. Similar to YUV422 but packed in a different order - https://en.wikipedia.org/wiki/YUV */ RS2_FORMAT_RGB8 , //&lt; 8-bit red, green and blue channels */ RS2_FORMAT_BGR8 , //&lt; 8-bit blue, green, and red channels &ndash; suitable for OpenCV */ RS2_FORMAT_RGBA8 , //&lt; 8-bit red, green and blue channels + constant alpha channel equal to FF */ RS2_FORMAT_BGRA8 , //&lt; 8-bit blue, green, and red channels + constant alpha channel equal to FF */ RS2_FORMAT_Y8 , //&lt; 8-bit per-pixel grayscale image */ RS2_FORMAT_Y16 , //&lt; 16-bit per-pixel grayscale image */ RS2_FORMAT_RAW10 , //&lt; Four 10 bits per pixel luminance values packed into a 5-byte macropixel */ RS2_FORMAT_RAW16 , //&lt; 16-bit raw image */ RS2_FORMAT_RAW8 , //&lt; 8-bit raw image */ RS2_FORMAT_UYVY , //&lt; Similar to the standard YUYV pixel format, but packed in a different order */ RS2_FORMAT_MOTION_RAW , //&lt; Raw data from the motion sensor */ RS2_FORMAT_MOTION_XYZ32F , //&lt; Motion data packed as 3 32-bit float values, for X, Y, and Z axis */ RS2_FORMAT_GPIO_RAW , //&lt; Raw data from the external sensors hooked to one of the GPIO's */ RS2_FORMAT_6DOF , //&lt; Pose data packed as floats array, containing translation vector, rotation quaternion and prediction velocities and accelerations vectors */ RS2_FORMAT_DISPARITY32 , //&lt; 32-bit float-point disparity values. Depth-&gt;Disparity conversion : Disparity = Baseline*FocalLength/Depth */ RS2_FORMAT_Y10BPACK , //&lt; 16-bit per-pixel grayscale image unpacked from 10 bits per pixel packed ([8:8:8:8:2222]) grey-scale image. The data is unpacked to LSB and padded with 6 zero bits */ RS2_FORMAT_DISTANCE , //&lt; 32-bit float-point depth distance value. */ RS2_FORMAT_MJPEG , //&lt; Bitstream encoding for video in which an image of each frame is encoded as JPEG-DIB */ RS2_FORMAT_Y8I , //&lt; 8-bit per pixel interleaved. 8-bit left, 8-bit right. */ RS2_FORMAT_Y12I , //&lt; 12-bit per pixel interleaved. 12-bit left, 12-bit right. Each pixel is stored in a 24-bit word in little-endian order. */ RS2_FORMAT_INZI , //&lt; multi-planar Depth 16bit + IR 10bit. */ RS2_FORMAT_INVI , //&lt; 8-bit IR stream. */ RS2_FORMAT_W10 , //&lt; Grey-scale image as a bit-packed array. 4 pixel data stream taking 5 bytes */ RS2_FORMAT_Z16H , //&lt; Variable-length Huffman-compressed 16-bit depth values. */ RS2_FORMAT_FG , //&lt; 16-bit per-pixel frame grabber format. */ RS2_FORMAT_Y411 , //&lt; 12-bit per-pixel. */ RS2_FORMAT_COUNT //&lt; Number of enumeration values. Not a valid input: intended to be used in for-loops. */    RS2_FORMAT_ANY  When passed to enable stream, librealsense will try to provide best suited format */  RS2_FORMAT_Z16  16-bit linear depth values. The depth is meters is equal to depth scale * pixel value. */  RS2_FORMAT_DISPARITY16  16-bit float-point disparity values. Depth-&gt;Disparity conversion : Disparity = Baseline*FocalLength/Depth. */  RS2_FORMAT_XYZ32F  32-bit floating point 3D coordinates. */  RS2_FORMAT_YUYV  32-bit y0, u, y1, v data for every two pixels. Similar to YUV422 but packed in a different order - https://en.wikipedia.org/wiki/YUV */  RS2_FORMAT_RGB8  8-bit red, green and blue channels */  RS2_FORMAT_BGR8  8-bit blue, green, and red channels &ndash; suitable for OpenCV */  RS2_FORMAT_RGBA8  8-bit red, green and blue channels + constant alpha channel equal to FF */  RS2_FORMAT_BGRA8  8-bit blue, green, and red channels + constant alpha channel equal to FF */  RS2_FORMAT_Y8  8-bit per-pixel grayscale image */  RS2_FORMAT_Y16  16-bit per-pixel grayscale image */  RS2_FORMAT_RAW10  Four 10 bits per pixel luminance values packed into a 5-byte macropixel */  RS2_FORMAT_RAW16  16-bit raw image */  RS2_FORMAT_RAW8  8-bit raw image */  RS2_FORMAT_UYVY  Similar to the standard YUYV pixel format, but packed in a different order */  RS2_FORMAT_MOTION_RAW  Raw data from the motion sensor */  RS2_FORMAT_MOTION_XYZ32F  Motion data packed as 3 32-bit float values, for X, Y, and Z axis */  RS2_FORMAT_GPIO_RAW  Raw data from the external sensors hooked to one of the GPIO's */  RS2_FORMAT_6DOF  Pose data packed as floats array, containing translation vector, rotation quaternion and prediction velocities and accelerations vectors */  RS2_FORMAT_DISPARITY32  32-bit float-point disparity values. Depth-&gt;Disparity conversion : Disparity = Baseline*FocalLength/Depth */  RS2_FORMAT_Y10BPACK  16-bit per-pixel grayscale image unpacked from 10 bits per pixel packed ([8:8:8:8:2222]) grey-scale image. The data is unpacked to LSB and padded with 6 zero bits */  RS2_FORMAT_DISTANCE  32-bit float-point depth distance value. */  RS2_FORMAT_MJPEG  Bitstream encoding for video in which an image of each frame is encoded as JPEG-DIB */  RS2_FORMAT_Y8I  8-bit per pixel interleaved. 8-bit left, 8-bit right. */  RS2_FORMAT_Y12I  12-bit per pixel interleaved. 12-bit left, 12-bit right. Each pixel is stored in a 24-bit word in little-endian order. */  RS2_FORMAT_INZI  multi-planar Depth 16bit + IR 10bit. */  RS2_FORMAT_INVI  8-bit IR stream. */  RS2_FORMAT_W10  Grey-scale image as a bit-packed array. 4 pixel data stream taking 5 bytes */  RS2_FORMAT_Z16H  Variable-length Huffman-compressed 16-bit depth values. */  RS2_FORMAT_FG  16-bit per-pixel frame grabber format. */  RS2_FORMAT_Y411  12-bit per-pixel. */  RS2_FORMAT_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. */ ", "tags": "", "url": "rs_sensor.html#rs2_format"},
     {"title": "rs_types", "text": "Exposes RealSense structs   ", "tags": "", "url": "rs_types.html"},
     {"title": "rs_types.RS2_EXTENSION_UNKNOWN", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_UNKNOWN"},
     {"title": "rs_types.RS2_EXTENSION_DEBUG", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DEBUG"},
     {"title": "rs_types.RS2_EXTENSION_INFO", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_INFO"},
     {"title": "rs_types.RS2_EXTENSION_MOTION", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_MOTION"},
     {"title": "rs_types.RS2_EXTENSION_OPTIONS", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_OPTIONS"},
     {"title": "rs_types.RS2_EXTENSION_VIDEO", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_VIDEO"},
     {"title": "rs_types.RS2_EXTENSION_ROI", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_ROI"},
     {"title": "rs_types.RS2_EXTENSION_DEPTH_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DEPTH_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_VIDEO_FRAME", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_VIDEO_FRAME"},
     {"title": "rs_types.RS2_EXTENSION_MOTION_FRAME", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_MOTION_FRAME"},
     {"title": "rs_types.RS2_EXTENSION_COMPOSITE_FRAME", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_COMPOSITE_FRAME"},
     {"title": "rs_types.RS2_EXTENSION_POINTS", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_POINTS"},
     {"title": "rs_types.RS2_EXTENSION_DEPTH_FRAME", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DEPTH_FRAME"},
     {"title": "rs_types.RS2_EXTENSION_ADVANCED_MODE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_ADVANCED_MODE"},
     {"title": "rs_types.RS2_EXTENSION_RECORD", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_RECORD"},
     {"title": "rs_types.RS2_EXTENSION_VIDEO_PROFILE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_VIDEO_PROFILE"},
     {"title": "rs_types.RS2_EXTENSION_PLAYBACK", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_PLAYBACK"},
     {"title": "rs_types.RS2_EXTENSION_DEPTH_STEREO_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DEPTH_STEREO_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_DISPARITY_FRAME", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DISPARITY_FRAME"},
     {"title": "rs_types.RS2_EXTENSION_MOTION_PROFILE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_MOTION_PROFILE"},
     {"title": "rs_types.RS2_EXTENSION_POSE_FRAME", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_POSE_FRAME"},
     {"title": "rs_types.RS2_EXTENSION_POSE_PROFILE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_POSE_PROFILE"},
     {"title": "rs_types.RS2_EXTENSION_TM2", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_TM2"},
     {"title": "rs_types.RS2_EXTENSION_SOFTWARE_DEVICE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_SOFTWARE_DEVICE"},
     {"title": "rs_types.RS2_EXTENSION_SOFTWARE_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_SOFTWARE_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_DECIMATION_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DECIMATION_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_THRESHOLD_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_THRESHOLD_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_DISPARITY_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DISPARITY_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_SPATIAL_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_SPATIAL_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_TEMPORAL_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_TEMPORAL_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_HOLE_FILLING_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_HOLE_FILLING_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_ZERO_ORDER_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_ZERO_ORDER_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_RECOMMENDED_FILTERS", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_RECOMMENDED_FILTERS"},
     {"title": "rs_types.RS2_EXTENSION_POSE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_POSE"},
     {"title": "rs_types.RS2_EXTENSION_POSE_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_POSE_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_WHEEL_ODOMETER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_WHEEL_ODOMETER"},
     {"title": "rs_types.RS2_EXTENSION_GLOBAL_TIMER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_GLOBAL_TIMER"},
     {"title": "rs_types.RS2_EXTENSION_UPDATABLE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_UPDATABLE"},
     {"title": "rs_types.RS2_EXTENSION_UPDATE_DEVICE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_UPDATE_DEVICE"},
     {"title": "rs_types.RS2_EXTENSION_L500_DEPTH_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_L500_DEPTH_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_TM2_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_TM2_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_AUTO_CALIBRATED_DEVICE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_AUTO_CALIBRATED_DEVICE"},
     {"title": "rs_types.RS2_EXTENSION_COLOR_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_COLOR_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_MOTION_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_MOTION_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_FISHEYE_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_FISHEYE_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_DEPTH_HUFFMAN_DECODER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DEPTH_HUFFMAN_DECODER"},
     {"title": "rs_types.RS2_EXTENSION_SERIALIZABLE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_SERIALIZABLE"},
     {"title": "rs_types.RS2_EXTENSION_FW_LOGGER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_FW_LOGGER"},
     {"title": "rs_types.RS2_EXTENSION_AUTO_CALIBRATION_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_AUTO_CALIBRATION_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_DEVICE_CALIBRATION", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DEVICE_CALIBRATION"},
     {"title": "rs_types.RS2_EXTENSION_CALIBRATED_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_CALIBRATED_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_HDR_MERGE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_HDR_MERGE"},
     {"title": "rs_types.RS2_EXTENSION_SEQUENCE_ID_FILTER", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_SEQUENCE_ID_FILTER"},
     {"title": "rs_types.RS2_EXTENSION_MAX_USABLE_RANGE_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_MAX_USABLE_RANGE_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_DEBUG_STREAM_SENSOR", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_DEBUG_STREAM_SENSOR"},
     {"title": "rs_types.RS2_EXTENSION_CALIBRATION_CHANGE_DEVICE", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_CALIBRATION_CHANGE_DEVICE"},
     {"title": "rs_types.RS2_EXTENSION_COUNT", "text": "   ", "tags": "", "url": "rs_types.html#RS2_EXTENSION_COUNT"},
     {"title": "rs_types.rs2_get_error_message", "text": "    ", "tags": "", "url": "rs_types.html#rs2_get_error_message"},
     {"title": "rs_types.rs2_get_failed_function", "text": "    ", "tags": "", "url": "rs_types.html#rs2_get_failed_function"},
     {"title": "rs_types.rs2_get_failed_args", "text": "    ", "tags": "", "url": "rs_types.html#rs2_get_failed_args"},
     {"title": "rs_types.rs2_free_error", "text": "    ", "tags": "", "url": "rs_types.html#rs2_free_error"},
     {"title": "rs_types.rs2_exception_type_to_string", "text": "    ", "tags": "", "url": "rs_types.html#rs2_exception_type_to_string"},
     {"title": "rs_types.pRS2_error", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_error"},
     {"title": "rs_types.pRS2_context", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_context"},
     {"title": "rs_types.pRS2_device_list", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_device_list"},
     {"title": "rs_types.pRS2_device_info", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_device_info"},
     {"title": "rs_types.pRS2_device", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_device"},
     {"title": "rs_types.pUser", "text": "   ", "tags": "", "url": "rs_types.html#pUser"},
     {"title": "rs_types.pRS2_device_hub", "text": "??   ", "tags": "", "url": "rs_types.html#pRS2_device_hub"},
     {"title": "rs_types.pRS2_pipeline", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_pipeline"},
     {"title": "rs_types.pRS2_exception_type", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_exception_type"},
     {"title": "rs_types.pRS2_config", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_config"},
     {"title": "rs_types.pRS2_pipeline_profile", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_pipeline_profile"},
     {"title": "rs_types.pRS2_frame", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_frame"},
     {"title": "rs_types.Rs2_time_t", "text": "Timestamp format. units are milliseconds   ", "tags": "", "url": "rs_types.html#Rs2_time_t"},
     {"title": "rs_types.Rs2_metadata_type", "text": "Metadata attribute type is defined as 64 bit signed integer   ", "tags": "", "url": "rs_types.html#Rs2_metadata_type"},
     {"title": "rs_types.pRS2_devices_changed_callback", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_devices_changed_callback"},
     {"title": "rs_types.RS2_devices_changed_callback", "text": "    ", "tags": "", "url": "rs_types.html#RS2_devices_changed_callback"},
     {"title": "rs_types.rs2_exception_type", "text": "Exception types are the different categories of errors that RealSense API might return. */    RS2_EXCEPTION_TYPE_UNKNOWN    RS2_EXCEPTION_TYPE_CAMERA_DISCONNECTED  Device was disconnected, this can be caused by outside intervention, by internal firmware error or due to insufficient power  RS2_EXCEPTION_TYPE_BACKEND  Error was returned from the underlying OS-specific layer  RS2_EXCEPTION_TYPE_INVALID_VALUE  Invalid value was passed to the API  RS2_EXCEPTION_TYPE_WRONG_API_CALL_SEQUENCE  Function precondition was violated  RS2_EXCEPTION_TYPE_NOT_IMPLEMENTED  The method is not implemented at this point  RS2_EXCEPTION_TYPE_DEVICE_IN_RECOVERY_MODE  Device is in recovery mode and might require firmware update  RS2_EXCEPTION_TYPE_IO  IO Device failure  RS2_EXCEPTION_TYPE_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. ", "tags": "", "url": "rs_types.html#rs2_exception_type"}
]};
