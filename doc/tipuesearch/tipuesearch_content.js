var tipuesearch = {"pages": [
     {"title": "rs", "text": "Exposes librealsense functionality   ", "tags": "", "url": "rs.html"},
     {"title": "rs.RS2_API_MAJOR_VERSION", "text": "typedef double rs2_time_t; /**&lt; Timestamp format. units are milliseconds */ typedef long long rs2_metadata_type; /**&lt; Metadata attribute type is defined as 64 bit signed integer*/   ", "tags": "", "url": "rs.html#RS2_API_MAJOR_VERSION"},
     {"title": "rs.RS2_API_MINOR_VERSION", "text": "   ", "tags": "", "url": "rs.html#RS2_API_MINOR_VERSION"},
     {"title": "rs.RS2_API_PATCH_VERSION", "text": "   ", "tags": "", "url": "rs.html#RS2_API_PATCH_VERSION"},
     {"title": "rs.RS2_API_BUILD_VERSION", "text": "   ", "tags": "", "url": "rs.html#RS2_API_BUILD_VERSION"},
     {"title": "rs.RS2_API_VERSION", "text": "   ", "tags": "", "url": "rs.html#RS2_API_VERSION"},
     {"title": "rs.RS2_API_VERSION_STR", "text": "    ", "tags": "", "url": "rs.html#RS2_API_VERSION_STR"},
     {"title": "rs.RS2_API_FULL_VERSION_STR", "text": "    ", "tags": "", "url": "rs.html#RS2_API_FULL_VERSION_STR"},
     {"title": "rs_config", "text": "Exposes RealSense processing-block functionality   ", "tags": "", "url": "rs_config.html"},
     {"title": "rs_config.RS2_DEFAULT_TIMEOUT", "text": "   ", "tags": "", "url": "rs_config.html#RS2_DEFAULT_TIMEOUT"},
     {"title": "rs_config.rs2_create_config", "text": "Create a config instance The config allows pipeline users to request filters for the pipeline streams and device selection and configuration. This is an optional step in pipeline creation, as the pipeline resolves its streaming device internally. Config provides its users a way to set the filters and test if there is no conflict with the pipeline requirements from the device. It also allows the user to find a matching device for the config filters and the pipeline, in order to select a device explicitly, and modify its controls before streaming starts.    param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return rs2_config* A pointer to a new config instance    ", "tags": "", "url": "rs_config.html#rs2_create_config"},
     {"title": "rs_config.rs2_delete_config", "text": "Deletes an instance of a config param[in] config A pointer to an instance of a config    ", "tags": "", "url": "rs_config.html#rs2_delete_config"},
     {"title": "rs_config.rs2_config_enable_stream", "text": "Enable a device stream explicitly, with selected stream parameters. The method allows the application to request a stream with specific configuration. If no stream is explicitly enabled, the pipeline configures the device and its streams according to the attached computer vision modules and processing blocks requirements, or default configuration for the first available device. The application can configure any of the input stream parameters according to its requirement, or set to 0 for don't care value. The config accumulates the application calls for enable configuration methods, until the configuration is applied. Multiple enable stream calls for the same stream with conflicting parameters override each other, and the last call is maintained. Upon calling \\c resolve(), the config checks for conflicts between the application configuration requests and the attached computer vision modules and processing blocks requirements, and fails if conflicts are found. Before \\c resolve() is called, no conflict check is done.    param[in] config A pointer to an instance of a config param[in] stream Stream type to be enabled param[in] index Stream index, used for multiple streams of the same type. -1 indicates any. param[in] width Stream image width - for images streams. 0 indicates any. param[in] height Stream image height - for images streams. 0 indicates any. param[in] format Stream data format - pixel format for images streams, of data type for other streams. RS2_FORMAT_ANY indicates any. param[in] framerate Stream frames per second. 0 indicates any. param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_enable_stream"},
     {"title": "rs_config.rs2_config_enable_all_stream", "text": "Enable all device streams explicitly. The conditions and behavior of this method are similar to those of \\c enable_stream(). This filter enables all raw streams of the selected device. The device is either selected explicitly by the application, or by the pipeline requirements or default. The list of streams is device dependent.    param[in] config A pointer to an instance of a config param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_enable_all_stream"},
     {"title": "rs_config.rs2_config_enable_device", "text": "Select a specific device explicitly by its serial number, to be used by the pipeline. The conditions and behavior of this method are similar to those of \\c enable_stream(). This method is required if the application needs to set device or sensor settings prior to pipeline streaming, to enforce the pipeline to use the configured device.    param[in] config A pointer to an instance of a config param[in] serial device serial number, as returned by RS2_CAMERA_INFO_SERIAL_NUMBER param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_enable_device"},
     {"title": "rs_config.rs2_config_enable_device_from_file", "text": "Select a recorded device from a file, to be used by the pipeline through playback. The device available streams are as recorded to the file, and \\c resolve() considers only this device and configuration as available. This request cannot be used if enable_record_to_file() is called for the current config, and vise versa By default, playback is repeated once the file ends. To control this, see 'rs2_config_enable_device_from_file_repeat_option'.    param[in] config A pointer to an instance of a config param[in] file The playback file of the device param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_enable_device_from_file"},
     {"title": "rs_config.rs2_config_enable_device_from_file_repeat_option", "text": "Select a recorded device from a file, to be used by the pipeline through playback. The device available streams are as recorded to the file, and \\c resolve() considers only this device and configuration as available. This request cannot be used if enable_record_to_file() is called for the current config, and vise versa    param[in] config A pointer to an instance of a config param[in] file The playback file of the device param[in] repeat_playback if true, when file ends the playback starts again, in an infinite loop; if false, when file ends playback does not start again, and should by stopped manually by the user. param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_enable_device_from_file_repeat_option"},
     {"title": "rs_config.rs2_config_enable_record_to_file", "text": "Requires that the resolved device would be recorded to file This request cannot be used if enable_device_from_file() is called for the current config, and vise versa    param[in] config A pointer to an instance of a config param[in] file The desired file for the output record param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_enable_record_to_file"},
     {"title": "rs_config.rs2_config_disable_stream", "text": "Disable a device stream explicitly, to remove any requests on this stream type. The stream can still be enabled due to pipeline computer vision module request. This call removes any filter on the stream configuration.    param[in] config A pointer to an instance of a config param[in] stream Stream type, for which the filters are cleared param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_disable_stream"},
     {"title": "rs_config.rs2_config_disable_indexed_stream", "text": "Disable a device stream explicitly, to remove any requests on this stream profile. The stream can still be enabled due to pipeline computer vision module request. This call removes any filter on the stream configuration. param[in] config A pointer to an instance of a config param[in] stream Stream type, for which the filters are cleared param[in] index Stream index, for which the filters are cleared param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_disable_indexed_stream"},
     {"title": "rs_config.rs2_config_disable_all_streams", "text": "Disable all device stream explicitly, to remove any requests on the streams profiles. The streams can still be enabled due to pipeline computer vision module request. This call removes any filter on the streams configuration.    param[in] config A pointer to an instance of a config param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_config.html#rs2_config_disable_all_streams"},
     {"title": "rs_config.rs2_config_resolve", "text": "Resolve the configuration filters, to find a matching device and streams profiles. The method resolves the user configuration filters for the device and streams, and combines them with the requirements of the computer vision modules and processing blocks attached to the pipeline. If there are no conflicts of requests, it looks for an available device, which can satisfy all requests, and selects the first matching streams configuration. In the absence of any request, the rs2::config selects the first available device and the first color and depth streams configuration. The pipeline profile selection during \\c start() follows the same method. Thus, the selected profile is the same, if no change occurs to the available devices occurs. Resolving the pipeline configuration provides the application access to the pipeline selected device for advanced control. The returned configuration is not applied to the device, so the application doesn't own the device sensors. However, the application can call \\c enable_device(), to enforce the device returned by this method is selected by pipeline \\c start(), and configure the device and sensors options or extensions before streaming starts.    param[in] config A pointer to an instance of a config param[in] pipe The pipeline for which the selected filters are applied param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return A matching device and streams profile, which satisfies the filters and pipeline requests.    ", "tags": "", "url": "rs_config.html#rs2_config_resolve"},
     {"title": "rs_config.rs2_config_can_resolve", "text": "Check if the config can resolve the configuration filters, to find a matching device and streams profiles. The resolution conditions are as described in \\c resolve().    param[in] config A pointer to an instance of a config param[in] pipe The pipeline for which the selected filters are applied param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return True if a valid profile selection exists, false if no selection can be found under the config filters and the available devices.    ", "tags": "", "url": "rs_config.html#rs2_config_can_resolve"},
     {"title": "rs_context", "text": "Exposes RealSense context functionality   ", "tags": "", "url": "rs_context.html"},
     {"title": "rs_context.RS2_PRODUCT_LINE_ANY", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_ANY"},
     {"title": "rs_context.RS2_PRODUCT_LINE_ANY_INTEL", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_ANY_INTEL"},
     {"title": "rs_context.RS2_PRODUCT_LINE_NON_INTEL", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_NON_INTEL"},
     {"title": "rs_context.RS2_PRODUCT_LINE_D400", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_D400"},
     {"title": "rs_context.RS2_PRODUCT_LINE_SR300", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_SR300"},
     {"title": "rs_context.RS2_PRODUCT_LINE_L500", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_L500"},
     {"title": "rs_context.RS2_PRODUCT_LINE_T200", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_T200"},
     {"title": "rs_context.RS2_PRODUCT_LINE_DEPTH", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_DEPTH"},
     {"title": "rs_context.RS2_PRODUCT_LINE_TRACKING", "text": "   ", "tags": "", "url": "rs_context.html#RS2_PRODUCT_LINE_TRACKING"},
     {"title": "rs_context.rs2_create_context", "text": "brief Creates RealSense context that is required for the rest of the API. param[in] api_version Users are expected to pass their version of \\c RS2_API_VERSION to make sure they are running the correct librealsense version. param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored. return Context object    ", "tags": "", "url": "rs_context.html#rs2_create_context"},
     {"title": "rs_context.rs2_delete_context", "text": "brief Frees the relevant context object. param[in] context Object that is no longer needed    ", "tags": "", "url": "rs_context.html#rs2_delete_context"},
     {"title": "rs_context.rs2_set_devices_changed_callback", "text": "/** * set callback to get devices changed events * these events will be raised by the context whenever new RealSense device is connected or existing device gets disconnected * \\param context Object representing librealsense session * \\param[in] callback function pointer to register as per-notifications callback * \\param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored */    ", "tags": "", "url": "rs_context.html#rs2_set_devices_changed_callback"},
     {"title": "rs_context.rs2_context_add_device", "text": "Create a new device and add it to the context \\param ctx The context to which the new device will be added \\param file The file from which the device should be created \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored     A pointer to a device that plays data from the file, or null in case of failure", "tags": "", "url": "rs_context.html#rs2_context_add_device"},
     {"title": "rs_context.rs2_context_add_software_device", "text": "Add an instance of software device to the context param ctx The context to which the new device will be added param dev Instance of software device to register into the context param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_context.html#rs2_context_add_software_device"},
     {"title": "rs_context.rs2_context_remove_device", "text": "Removes a playback device from the context, if exists \\param[in] ctx The context from which the device should be removed \\param[in] file The file name that was used to add the device \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_context.html#rs2_context_remove_device"},
     {"title": "rs_context.rs2_context_unload_tracking_module", "text": "Removes tracking module. function query_devices() locks the tracking module in the tm_context object. If the tracking module device is not used it should be removed using this function, so that other applications could find it. This function can be used both before the call to query_device() to prevent enabling tracking modules or afterwards to release them.    ", "tags": "", "url": "rs_context.html#rs2_context_unload_tracking_module"},
     {"title": "rs_context.rs2_query_devices", "text": "create a static snapshot of all connected devices at the time of the call \\param context Object representing librealsense session \\param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored \\return the list of devices, should be released by rs2_delete_device_list    ", "tags": "", "url": "rs_context.html#rs2_query_devices"},
     {"title": "rs_context.rs2_query_devices_ex", "text": "create a static snapshot of all connected devices at the time of the call \\param context Object representing librealsense session \\param product_mask Controls what kind of devices will be returned \\param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored \\return the list of devices, should be released by rs2_delete_device_list    ", "tags": "", "url": "rs_context.html#rs2_query_devices_ex"},
     {"title": "rs_context.rs2_create_device_hub", "text": "brief Creates RealSense device_hub . \\param[in] context The context for the device hub \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored. \\return Device hub object    ", "tags": "", "url": "rs_context.html#rs2_create_device_hub"},
     {"title": "rs_context.rs2_device_hub_wait_for_device", "text": "If any device is connected return it, otherwise wait until next RealSense device connects. Calling this method multiple times will cycle through connected devices \\param[in] ctx The context to creat the device \\param[in] hub The device hub object \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored. \\return device object    ", "tags": "", "url": "rs_context.html#rs2_device_hub_wait_for_device"},
     {"title": "rs_context.rs2_device_hub_is_device_connected", "text": "Checks if device is still connected \\param[in] hub The device hub object \\param[in] device The device \\param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored. \\return 1 if the device is connected, 0 otherwise    ", "tags": "", "url": "rs_context.html#rs2_device_hub_is_device_connected"},
     {"title": "rs_frame", "text": "Exposes RealSense frame functionality   ", "tags": "", "url": "rs_frame.html"},
     {"title": "rs_frame.rs2_timestamp_domain_to_string", "text": "    ", "tags": "", "url": "rs_frame.html#rs2_timestamp_domain_to_string"},
     {"title": "rs_frame.rs2_calib_target_type_to_string", "text": "    ", "tags": "", "url": "rs_frame.html#rs2_calib_target_type_to_string"},
     {"title": "rs_frame.rs2_frame_metadata_to_string", "text": "    ", "tags": "", "url": "rs_frame.html#rs2_frame_metadata_to_string"},
     {"title": "rs_frame.rs2_frame_metadata_value_to_string", "text": "    ", "tags": "", "url": "rs_frame.html#rs2_frame_metadata_value_to_string"},
     {"title": "rs_frame.rs2_extract_frame", "text": "Extract frame from within a composite frame param[in] composite Composite frame param[in] index Index of the frame to extract within the composite frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return returns reference to a frame existing within the composite frame If you wish to keep this frame after the composite is released, you need to call acquire_ref Otherwise the resulting frame lifetime is bound by owning composite frame    ", "tags": "", "url": "rs_frame.html#rs2_extract_frame"},
     {"title": "rs_frame.rs2_embedded_frames_count", "text": "Get number of frames embedded within a composite frame param[in] composite Composite input frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Number of embedded frames    ", "tags": "", "url": "rs_frame.html#rs2_embedded_frames_count"},
     {"title": "rs_frame.rs2_release_frame", "text": "relases the frame handle param[in] frame handle returned from a callback    ", "tags": "", "url": "rs_frame.html#rs2_release_frame"},
     {"title": "rs_frame.rs2_get_frame_data_size", "text": "retrieve data size from frame handle param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the size of the frame data    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_data_size"},
     {"title": "rs_frame.rs2_get_frame_data", "text": "retrieve data from frame handle param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the pointer to the start of the frame data    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_data"},
     {"title": "rs_frame.rs2_get_frame_number", "text": "retrieve frame number from frame handle param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the frame nubmer of the frame, in milliseconds since the device was started    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_number"},
     {"title": "rs_frame.rs2_get_frame_timestamp_domain", "text": "retrieve timestamp domain from frame handle. timestamps can only be comparable if they are in common domain (for example, depth timestamp might come from system time while color timestamp might come from the device) this method is used to check if two timestamp values are comparable (generated from the same clock) param[in] frameset handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the timestamp domain of the frame (camera / microcontroller / system time)    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_timestamp_domain"},
     {"title": "rs_frame.rs2_get_frame_timestamp", "text": "retrieve timestamp from frame handle in milliseconds param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the timestamp of the frame in milliseconds    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_timestamp"},
     {"title": "rs_frame.rs2_get_frame_metadata", "text": "retrieve metadata from frame handle param[in] frame handle returned from a callback param[in] frame_metadata the rs2_frame_metadata whose latest frame we are interested in param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the metadata value    rs2_metadata_type rs2_get_frame_metadata(const rs2_frame* frame, rs2_frame_metadata_value frame_metadata, rs2_error** error);    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_metadata"},
     {"title": "rs_frame.rs2_supports_frame_metadata", "text": "determine device metadata param[in] frame handle returned from a callback param[in] frame_metadata the metadata to check for support param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return true if device has this metadata    ", "tags": "", "url": "rs_frame.html#rs2_supports_frame_metadata"},
     {"title": "rs_frame.rs2_get_frame_sensor", "text": "retrieve frame parent sensor from frame handle param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the parent sensor of the frame    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_sensor"},
     {"title": "rs_frame.rs2_get_frame_width", "text": "retrieve frame width in pixels param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return frame width in pixels    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_width"},
     {"title": "rs_frame.rs2_get_frame_height", "text": "retrieve frame height in pixels param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return frame height in pixels    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_height"},
     {"title": "rs_frame.rs2_depth_frame_get_units", "text": "retrieve the scaling factor to use when converting a depth frame's get_data() units to meters return single - depth, in meters, per 1 unit stored in the frame data    ", "tags": "", "url": "rs_frame.html#rs2_depth_frame_get_units"},
     {"title": "rs_frame.rs2_get_frame_stride_in_bytes", "text": "retrieve frame stride in bytes (number of bytes from start of line N to start of line N+1) param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return stride in bytes    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_stride_in_bytes"},
     {"title": "rs_frame.rs2_get_frame_bits_per_pixel", "text": "retrieve bits per pixels in the frame image (note that bits per pixel is not necessarily divided by 8, as in 12bpp) param[in] frame handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return bits per pixel    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_bits_per_pixel"},
     {"title": "rs_frame.rs2_frame_add_ref", "text": "/** * create additional reference to a frame without duplicating frame data * \\param[in] frame handle returned from a callback * \\param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored * \\return new frame reference, has to be released by rs2_release_frame */ void rs2_frame_add_ref(rs2_frame* frame, rs2_error ** error);    ", "tags": "", "url": "rs_frame.html#rs2_frame_add_ref"},
     {"title": "rs_frame.rs2_keep_frame", "text": "communicate to the library you intend to keep the frame alive for a while this will remove the frame from the regular count of the frame pool once this function is called, the SDK can no longer guarantee 0-allocations during frame cycling \\param[in] frame handle returned from a callback    ", "tags": "", "url": "rs_frame.html#rs2_keep_frame"},
     {"title": "rs_frame.rs2_get_frame_vertices", "text": "When called on Points frame type, this method returns a pointer to an array of 3D vertices of the model The coordinate system is: X right, Y up, Z away from the camera. Units: Meters param[in] frame Points frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Pointer to an array of vertices, lifetime is managed by the frame    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_vertices"},
     {"title": "rs_frame.rs2_export_to_ply", "text": "When called on Points frame type, this method creates a ply file of the model with the given file name. param[in] frame Points frame param[in] fname The name for the ply file param[in] texture Texture frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_frame.html#rs2_export_to_ply"},
     {"title": "rs_frame.rs2_get_frame_texture_coordinates", "text": "When called on Points frame type, this method returns a pointer to an array of texture coordinates per vertex Each coordinate represent a (u,v) pair within [0,1] range, to be mapped to texture image param[in] frame Points frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Pointer to an array of texture coordinates, lifetime is managed by the frame    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_texture_coordinates"},
     {"title": "rs_frame.rs2_get_frame_points_count", "text": "When called on Points frame type, this method returns the number of vertices in the frame param[in] frame Points frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Number of vertices    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_points_count"},
     {"title": "rs_frame.rs2_get_frame_stream_profile", "text": "Returns the stream profile that was used to start the stream of this frame param[in] frame frame reference, owned by the user param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Pointer to the stream profile object, lifetime is managed elsewhere    ", "tags": "", "url": "rs_frame.html#rs2_get_frame_stream_profile"},
     {"title": "rs_frame.rs2_is_frame_extendable_to", "text": "Test if the given frame can be extended to the requested extension param[in] frame Realsense frame param[in] extension_type The extension to which the frame should be tested if it is extendable param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return non-zero value iff the frame can be extended to the given extension    ", "tags": "", "url": "rs_frame.html#rs2_is_frame_extendable_to"},
     {"title": "rs_frame.rs2_allocate_synthetic_video_frame", "text": "Allocate new video frame using a frame-source provided form a processing block param[in] source Frame pool to allocate the frame from param[in] new_stream New stream profile to assign to newly created frame param[in] original A reference frame that can be used to fill in auxilary information like format, width, height, bpp, stride (if applicable) param[in] new_bpp New value for bits per pixel for the allocated frame param[in] new_width New value for width for the allocated frame param[in] new_height New value for height for the allocated frame param[in] new_stride New value for stride in bytes for the allocated frame param[in] frame_type New value for frame type for the allocated frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return reference to a newly allocated frame, must be released with release_frame memory for the frame is likely to be re-used from previous frame, but in lack of available frames in the pool will be allocated from the free store    ", "tags": "", "url": "rs_frame.html#rs2_allocate_synthetic_video_frame"},
     {"title": "rs_frame.rs2_allocate_synthetic_motion_frame", "text": "Allocate new motion frame using a frame-source provided form a processing block param[in] source Frame pool to allocate the frame from param[in] new_stream New stream profile to assign to newly created frame param[in] original A reference frame that can be used to fill in auxilary information like format, width, height, bpp, stride (if applicable) param[in] frame_type New value for frame type for the allocated frame param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return reference to a newly allocated frame, must be released with release_frame memory for the frame is likely to be re-used from previous frame, but in lack of available frames in the pool will be allocated from the free store    ", "tags": "", "url": "rs_frame.html#rs2_allocate_synthetic_motion_frame"},
     {"title": "rs_frame.rs2_allocate_points", "text": "Allocate new points frame using a frame-source provided from a processing block param[in] source Frame pool to allocate the frame from param[in] new_stream New stream profile to assign to newly created frame param[in] original A reference frame that can be used to fill in auxilary information like format, width, height, bpp, stride (if applicable) param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return reference to a newly allocated frame, must be released with release_frame memory for the frame is likely to be re-used from previous frame, but in lack of available frames in the pool will be allocated from the free store    ", "tags": "", "url": "rs_frame.html#rs2_allocate_points"},
     {"title": "rs_frame.rs2_allocate_composite_frame", "text": "Allocate new composite frame, aggregating a set of existing frames param[in] source Frame pool to allocate the frame from param[in] frames Array of existing frames param[in] count Number of input frames param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return reference to a newly allocated frame, must be released with release_frame when composite frame gets released it will automatically release all of the input frames    Note: This is a pointer to a Array of Frames Todo: Test it. Original declaration: rs2_frame* rs2_allocate_composite_frame(rs2_source* source, rs2_frame** frames, int count, rs2_error** error);    ", "tags": "", "url": "rs_frame.html#rs2_allocate_composite_frame"},
     {"title": "rs_frame.rs2_synthetic_frame_ready", "text": "This method will dispatch frame callback on a frame param[in] source Frame pool provided by the processing block param[in] frame Frame to dispatch, frame ownership is passed to this function, so you don't have to call release_frame after it param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_frame.html#rs2_synthetic_frame_ready"},
     {"title": "rs_frame.rs2_pose_frame_get_pose_data", "text": "When called on Pose frame type, this method returns the transformation represented by the pose data param[in] frame Pose frame param[out] pose Pointer to a user allocated struct, which contains the pose info after a successful return param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_frame.html#rs2_pose_frame_get_pose_data"},
     {"title": "rs_frame.rs2_extract_target_dimensions", "text": "Extract the target dimensions on the specific target param[in] frame Left or right camera frame of specified size based on the target type param[in] calib_type Calibration target type param[out] target_dims The array to hold the result target dimensions calculated. For type RS2_CALIB_TARGET_RECT_GAUSSIAN_DOT_VERTICES and RS2_CALIB_TARGET_ROI_RECT_GAUSSIAN_DOT_VERTICES, the four rectangle side sizes in pixels with the order of top, bottom, left, and right For type RS2_CALIB_TARGET_POS_GAUSSIAN_DOT_VERTICES, the four vertices coordinates in pixels with the order of top, bottom, left, and right param[in] target_dims_size Target dimension array size. 4 for RS2_CALIB_TARGET_RECT_GAUSSIAN_DOT_VERTICES and 8 for RS2_CALIB_TARGET_POS_GAUSSIAN_DOT_VERTICES. param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_frame.html#rs2_extract_target_dimensions"},
     {"title": "rs_frame.Trs2_timestamp_domain", "text": "Specifies the clock in relation to which the frame timestamp was measured. */    RS2_TIMESTAMP_DOMAIN_HARDWARE_CLOCK, /**&lt; Frame timestamp was measured in relation to the camera clock */ RS2_TIMESTAMP_DOMAIN_SYSTEM_TIME, /**&lt; Frame timestamp was measured in relation to the OS system clock */ RS2_TIMESTAMP_DOMAIN_GLOBAL_TIME, /**&lt; Frame timestamp was measured in relation to the camera clock and converted to OS system clock by constantly measure the difference*/ RS2_TIMESTAMP_DOMAIN_COUNT /**&lt; Number of enumeration values. Not a valid input: intended to be used in for-loops. */    RS2_TIMESTAMP_DOMAIN_HARDWARE_CLOCK  Frame timestamp was measured in relation to the camera clock  RS2_TIMESTAMP_DOMAIN_SYSTEM_TIME  Frame timestamp was measured in relation to the OS system clock  RS2_TIMESTAMP_DOMAIN_GLOBAL_TIME  Frame timestamp was measured in relation to the camera clock and converted to OS system clock by constantly measure the difference  RS2_TIMESTAMP_DOMAIN_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. ", "tags": "", "url": "rs_frame.html#Trs2_timestamp_domain"},
     {"title": "rs_frame.Trs2_frame_metadata_value", "text": "Per-Frame-Metadata is the set of read-only properties that might be exposed for each individual frame. */    RS2_FRAME_METADATA_FRAME_COUNTER  A sequential index managed per-stream. Integer value  RS2_FRAME_METADATA_FRAME_TIMESTAMP  Timestamp set by device clock when data readout and transmit commence. usec  RS2_FRAME_METADATA_SENSOR_TIMESTAMP  Timestamp of the middle of sensor's exposure calculated by device. usec  RS2_FRAME_METADATA_ACTUAL_EXPOSURE  Sensor's exposure width. When Auto Exposure (AE) is on the value is controlled by firmware. usec  RS2_FRAME_METADATA_GAIN_LEVEL  A relative value increasing which will increase the Sensor's gain fctor. When AE is set On, the value is controlled by firmware. Integer value  RS2_FRAME_METADATA_AUTO_EXPOSURE  Auto Exposure Mode indicator. Zero corresponds to AE switched off.  RS2_FRAME_METADATA_WHITE_BALANCE  White Balance setting as a color temperature. Kelvin degrees  RS2_FRAME_METADATA_TIME_OF_ARRIVAL  Time of arrival in system clock  RS2_FRAME_METADATA_TEMPERATURE  Temperature of the device, measured at the time of the frame capture. Celsius degrees  RS2_FRAME_METADATA_BACKEND_TIMESTAMP  Timestamp get from uvc driver. usec  RS2_FRAME_METADATA_ACTUAL_FPS  Actual fps  RS2_FRAME_METADATA_FRAME_LASER_POWER  Laser power value 0-360.  RS2_FRAME_METADATA_FRAME_LASER_POWER_MODE  Laser power mode. Zero corresponds to Laser power switched off and one for switched on. deprecated, replaced by RS2_FRAME_METADATA_FRAME_EMITTER_MODE  RS2_FRAME_METADATA_EXPOSURE_PRIORITY  Exposure priority.  RS2_FRAME_METADATA_EXPOSURE_ROI_LEFT  Left region of interest for the auto exposure Algorithm.  RS2_FRAME_METADATA_EXPOSURE_ROI_RIGHT  Right region of interest for the auto exposure Algorithm.  RS2_FRAME_METADATA_EXPOSURE_ROI_TOP  Top region of interest for the auto exposure Algorithm.  RS2_FRAME_METADATA_EXPOSURE_ROI_BOTTOM  Bottom region of interest for the auto exposure Algorithm.  RS2_FRAME_METADATA_BRIGHTNESS  Color image brightness.  RS2_FRAME_METADATA_CONTRAST  Color image contrast.  RS2_FRAME_METADATA_SATURATION  Color image saturation.  RS2_FRAME_METADATA_SHARPNESS  Color image sharpness.  RS2_FRAME_METADATA_AUTO_WHITE_BALANCE_TEMPERATURE  Auto white balance temperature Mode indicator. Zero corresponds to automatic mode switched off.  RS2_FRAME_METADATA_BACKLIGHT_COMPENSATION  Color backlight compensation. Zero corresponds to switched off.  RS2_FRAME_METADATA_HUE  Color image hue.  RS2_FRAME_METADATA_GAMMA  Color image gamma.  RS2_FRAME_METADATA_MANUAL_WHITE_BALANCE  Color image white balance.  RS2_FRAME_METADATA_POWER_LINE_FREQUENCY  Power Line Frequency for anti-flickering Off/50Hz/60Hz/Auto.  RS2_FRAME_METADATA_LOW_LIGHT_COMPENSATION  Color lowlight compensation. Zero corresponds to switched off.  RS2_FRAME_METADATA_FRAME_EMITTER_MODE  Emitter mode: 0 - all emitters disabled. 1 - laser enabled. 2 - auto laser enabled (opt). 3 - LED enabled (opt).  RS2_FRAME_METADATA_FRAME_LED_POWER  Led power value 0-360.  RS2_FRAME_METADATA_RAW_FRAME_SIZE  The number of transmitted payload bytes, not including metadata */  RS2_FRAME_METADATA_GPIO_INPUT_DATA  GPIO input data  RS2_FRAME_METADATA_SEQUENCE_NAME  sub-preset id  RS2_FRAME_METADATA_SEQUENCE_ID  sub-preset sequence id  RS2_FRAME_METADATA_SEQUENCE_SIZE  sub-preset sequence size  RS2_FRAME_METADATA_COUNT   ", "tags": "", "url": "rs_frame.html#Trs2_frame_metadata_value"},
     {"title": "rs_frame.Trs2_calib_target_type", "text": "Calibration target type.    RS2_CALIB_TARGET_RECT_GAUSSIAN_DOT_VERTICES  Flat rectangle with vertices as the centers of Gaussian dots  RS2_CALIB_TARGET_ROI_RECT_GAUSSIAN_DOT_VERTICES  Flat rectangle with vertices as the centers of Gaussian dots with target inside the ROI  RS2_CALIB_TARGET_POS_GAUSSIAN_DOT_VERTICES  Positions of vertices as the centers of Gaussian dots with target inside the ROI  RS2_CALIB_TARGET_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. ", "tags": "", "url": "rs_frame.html#Trs2_calib_target_type"},
     {"title": "rs_pipeline", "text": "Exposes RealSense processing-block functionality   ", "tags": "", "url": "rs_pipeline.html"},
     {"title": "rs_pipeline.rs2_create_pipeline", "text": "Create a pipeline instance The pipeline simplifies the user interaction with the device and computer vision processing modules. The class abstracts the camera configuration and streaming, and the vision modules triggering and threading. It lets the application focus on the computer vision output of the modules, or the device output data. The pipeline can manage computer vision modules, which are implemented as a processing blocks. The pipeline is the consumer of the processing block interface, while the application consumes the computer vision interface. param[in] ctx context param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_pipeline.html#rs2_create_pipeline"},
     {"title": "rs_pipeline.rs2_pipeline_stop", "text": "Stop the pipeline streaming. The pipeline stops delivering samples to the attached computer vision modules and processing blocks, stops the device streaming and releases the device resources used by the pipeline. It is the application's responsibility to release any frame reference it owns. The method takes effect only after \\c start() was called, otherwise an exception is raised. param[in] pipe pipeline param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_stop"},
     {"title": "rs_pipeline.rs2_delete_pipeline", "text": "Delete a pipeline instance. Upon destruction, the pipeline will implicitly stop itself param[in] pipe to delete    ", "tags": "", "url": "rs_pipeline.html#rs2_delete_pipeline"},
     {"title": "rs_pipeline.rs2_pipeline_start_with_config", "text": "Start the pipeline streaming according to the configuraion. The pipeline streaming loop captures samples from the device, and delivers them to the attached computer vision modules and processing blocks, according to each module requirements and threading model. During the loop execution, the application can access the camera streams by calling \\c wait_for_frames() or \\c poll_for_frames(). The streaming loop runs until the pipeline is stopped. Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised. The pipeline selects and activates the device upon start, according to configuration or a default configuration. When the rs2::config is provided to the method, the pipeline tries to activate the config \\c resolve() result. If the application requests are conflicting with pipeline computer vision modules or no matching device is available on the platform, the method fails. Available configurations and devices may change between config \\c resolve() call and pipeline start, in case devices are connected or disconnected, or another application acquires ownership of a device.    param[in] pipe a pointer to an instance of the pipeline param[in] config A rs2::config with requested filters on the pipeline configuration. By default no filters are applied. param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return The actual pipeline device and streams profile, which was successfully configured to the streaming device.    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_start_with_config"},
     {"title": "rs_pipeline.rs2_pipeline_wait_for_frames", "text": "Wait until a new set of frames becomes available. The frames set includes time-synchronized frames of each enabled stream in the pipeline. The method blocks the calling thread, and fetches the latest unread frames set. Device frames, which were produced while the function wasn't called, are dropped. To avoid frame drops, this method should be called as fast as the device frame rate. The application can maintain the frames handles to defer processing. However, if the application maintains too long history, the device may lack memory resources to produce new frames, and the following call to this method shall fail to retrieve new frames, until resources are retained. param[in] pipe the pipeline param[in] timeout_ms Max time in milliseconds to wait until an exception will be thrown param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return Set of coherent frames    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_wait_for_frames"},
     {"title": "rs_pipeline.rs2_delete_pipeline_profile", "text": "Deletes an instance of a pipeline profile param[in] profile A pointer to an instance of a pipeline profile    ", "tags": "", "url": "rs_pipeline.html#rs2_delete_pipeline_profile"},
     {"title": "rs_pipeline.rs2_pipeline_poll_for_frames", "text": "Check if a new set of frames is available and retrieve the latest undelivered set. The frames set includes time-synchronized frames of each enabled stream in the pipeline. The method returns without blocking the calling thread, with status of new frames available or not. If available, it fetches the latest frames set. Device frames, which were produced while the function wasn't called, are dropped. To avoid frame drops, this method should be called as fast as the device frame rate. The application can maintain the frames handles to defer processing. However, if the application maintains too long history, the device may lack memory resources to produce new frames, and the following calls to this method shall return no new frames, until resources are retained. param[in] pipe the pipeline param[out] output_frame frame handle to be released using rs2_release_frame param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return true if new frame was stored to output_frame    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_poll_for_frames"},
     {"title": "rs_pipeline.rs2_pipeline_try_wait_for_frames", "text": "Wait until a new set of frames becomes available. The frames set includes time-synchronized frames of each enabled stream in the pipeline. The method blocks the calling thread, and fetches the latest unread frames set. Device frames, which were produced while the function wasn't called, are dropped. To avoid frame drops, this method should be called as fast as the device frame rate. The application can maintain the frames handles to defer processing. However, if the application maintains too long history, the device may lack memory resources to produce new frames, and the following call to this method shall fail to retrieve new frames, until resources are retained. param[in] pipe the pipeline param[in] timeout_ms max time in milliseconds to wait until a frame becomes available param[out] output_frame frame handle to be released using rs2_release_frame param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return true if new frame was stored to output_frame    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_try_wait_for_frames"},
     {"title": "rs_pipeline.rs2_pipeline_start", "text": "Start the pipeline streaming with its default configuration. The pipeline streaming loop captures samples from the device, and delivers them to the attached computer vision modules and processing blocks, according to each module requirements and threading model. During the loop execution, the application can access the camera streams by calling \\c wait_for_frames() or \\c poll_for_frames(). The streaming loop runs until the pipeline is stopped. Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised.    param[in] pipe a pointer to an instance of the pipeline param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return The actual pipeline device and streams profile, which was successfully configured to the streaming device.    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_start"},
     {"title": "rs_pipeline.rs2_pipeline_start_with_callback", "text": "Start the pipeline streaming with its default configuration. The pipeline captures samples from the device, and delivers them to the through the provided frame callback. Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised. When starting the pipeline with a callback both \\c wait_for_frames() or \\c poll_for_frames() will throw exception.    param[in] pipe A pointer to an instance of the pipeline param[in] on_frame function pointer to register as per-frame callback param[in] user auxiliary data the user wishes to receive together with every frame callback param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return The actual pipeline device and streams profile, which was successfully configured to the streaming device.    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_start_with_callback"},
     {"title": "rs_pipeline.rs2_pipeline_start_with_config_and_callback", "text": "Start the pipeline streaming according to the configuraion. The pipeline captures samples from the device, and delivers them to the through the provided frame callback. Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised. When starting the pipeline with a callback both \\c wait_for_frames() or \\c poll_for_frames() will throw exception. The pipeline selects and activates the device upon start, according to configuration or a default configuration. When the rs2::config is provided to the method, the pipeline tries to activate the config \\c resolve() result. If the application requests are conflicting with pipeline computer vision modules or no matching device is available on the platform, the method fails. Available configurations and devices may change between config \\c resolve() call and pipeline start, in case devices are connected or disconnected, or another application acquires ownership of a device.    param[in] pipe A pointer to an instance of the pipeline param[in] config A rs2::config with requested filters on the pipeline configuration. By default no filters are applied. param[in] on_frame function pointer to register as per-frame callback param[in] user auxiliary data the user wishes to receive together with every frame callback param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return The actual pipeline device and streams profile, which was successfully configured to the streaming device.    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_start_with_config_and_callback"},
     {"title": "rs_pipeline.rs2_pipeline_get_active_profile", "text": "Return the active device and streams profiles, used by the pipeline. The pipeline streams profiles are selected during \\c start(). The method returns a valid result only when the pipeline is active - between calls to \\c start() and \\c stop(). After \\c stop() is called, the pipeline doesn't own the device, thus, the pipeline selected device may change in subsequent activations.    param[in] pipe a pointer to an instance of the pipeline param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return The actual pipeline device and streams profile, which was successfully configured to the streaming device on start.    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_get_active_profile"},
     {"title": "rs_pipeline.rs2_pipeline_profile_get_device", "text": "Retrieve the device used by the pipeline. The device class provides the application access to control camera additional settings - get device information, sensor options information, options value query and set, sensor specific extensions. Since the pipeline controls the device streams configuration, activation state and frames reading, calling the device API functions, which execute those operations, results in unexpected behavior. The pipeline streaming device is selected during pipeline \\c start(). Devices of profiles, which are not returned by pipeline \\c start() or \\c get_active_profile(), are not guaranteed to be used by the pipeline.    param[in] profile A pointer to an instance of a pipeline profile param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return rs2_device* The pipeline selected device    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_profile_get_device"},
     {"title": "rs_pipeline.rs2_pipeline_profile_get_streams", "text": "Return the selected streams profiles, which are enabled in this profile.    param[in] profile A pointer to an instance of a pipeline profile param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return list of stream profiles    ", "tags": "", "url": "rs_pipeline.html#rs2_pipeline_profile_get_streams"},
     {"title": "rs_sensor", "text": "Exposes RealSense sensor functionality   ", "tags": "", "url": "rs_sensor.html"},
     {"title": "rs_sensor.Trs2_extrinsics", "text": "Cross-stream extrinsics: encodes the topology describing how the different devices are oriented. */   ", "tags": "", "url": "rs_sensor.Trs2_extrinsics.html"},
     {"title": "rs_sensor.Trs2_extrinsics.rotation", "text": "   ", "tags": "", "url": "rs_sensor.Trs2_extrinsics.html#rotation"},
     {"title": "rs_sensor.Trs2_extrinsics.translation", "text": "   ", "tags": "", "url": "rs_sensor.Trs2_extrinsics.html#translation"},
     {"title": "rs_sensor.rs2_camera_info_to_string", "text": "    ", "tags": "", "url": "rs_sensor.html#rs2_camera_info_to_string"},
     {"title": "rs_sensor.rs2_stream_to_string", "text": "    ", "tags": "", "url": "rs_sensor.html#rs2_stream_to_string"},
     {"title": "rs_sensor.rs2_format_to_string", "text": "    ", "tags": "", "url": "rs_sensor.html#rs2_format_to_string"},
     {"title": "rs_sensor.rs2_delete_sensor_list", "text": "Deletes sensors list, any sensors created from this list will remain unaffected param[in] info_list list to delete    ", "tags": "", "url": "rs_sensor.html#rs2_delete_sensor_list"},
     {"title": "rs_sensor.rs2_get_sensors_count", "text": "Determines number of sensors in a list param[in] info_list The list of connected sensors captured using rs2_query_sensors param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return Sensors count    ", "tags": "", "url": "rs_sensor.html#rs2_get_sensors_count"},
     {"title": "rs_sensor.rs2_delete_sensor", "text": "delete relasense sensor param[in] sensor realsense sensor to delete    ", "tags": "", "url": "rs_sensor.html#rs2_delete_sensor"},
     {"title": "rs_sensor.rs2_create_sensor", "text": "create sensor by index param[in] index the zero based index of sensor to retrieve param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the requested sensor, should be released by rs2_delete_sensor    rs2_sensor* rs2_create_sensor(const rs2_sensor_list* list, int index, rs2_error** error);    ", "tags": "", "url": "rs_sensor.html#rs2_create_sensor"},
     {"title": "rs_sensor.rs2_create_device_from_sensor", "text": "This is a helper function allowing the user to discover the device from one of its sensors param[in] sensor Pointer to a sensor param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return new device wrapper for the device of the sensor. Needs to be released by delete_device    ", "tags": "", "url": "rs_sensor.html#rs2_create_device_from_sensor"},
     {"title": "rs_sensor.rs2_get_sensor_info", "text": "retrieve sensor specific information, like versions of various internal components param[in] sensor the RealSense sensor param[in] info camera info type to retrieve param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the requested camera info string, in a format specific to the device model    ", "tags": "", "url": "rs_sensor.html#rs2_get_sensor_info"},
     {"title": "rs_sensor.rs2_supports_sensor_info", "text": "check if specific sensor info is supported param[in] info the parameter to check for support param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return true if the parameter both exist and well-defined for the specific device    ", "tags": "", "url": "rs_sensor.html#rs2_supports_sensor_info"},
     {"title": "rs_sensor.rs2_is_sensor_extendable_to", "text": "Test if the given sensor can be extended to the requested extension param[in] sensor Realsense sensor param[in] extension The extension to which the sensor should be tested if it is extendable param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return non-zero value iff the sensor can be extended to the given extension    ", "tags": "", "url": "rs_sensor.html#rs2_is_sensor_extendable_to"},
     {"title": "rs_sensor.rs2_get_depth_scale", "text": "When called on a depth sensor, this method will return the number of meters represented by a single depth unit param[in] sensor depth sensor param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the number of meters represented by a single depth unit    ", "tags": "", "url": "rs_sensor.html#rs2_get_depth_scale"},
     {"title": "rs_sensor.rs2_depth_stereo_frame_get_baseline", "text": "Retrieve the stereoscopic baseline value from frame. Applicable to stereo-based depth modules param[out] float Stereoscopic baseline in millimeters param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_depth_stereo_frame_get_baseline"},
     {"title": "rs_sensor.rs2_get_stereo_baseline", "text": "Retrieve the stereoscopic baseline value from sensor. Applicable to stereo-based depth modules param[out] float Stereoscopic baseline in millimeters param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_stereo_baseline"},
     {"title": "rs_sensor.rs2_set_region_of_interest", "text": "sets the active region of interest to be used by auto-exposure algorithm param[in] sensor the RealSense sensor param[in] min_x lower horizontal bound in pixels param[in] min_y lower vertical bound in pixels param[in] max_x upper horizontal bound in pixels param[in] max_y upper vertical bound in pixels param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_set_region_of_interest"},
     {"title": "rs_sensor.rs2_get_region_of_interest", "text": "brief gets the active region of interest to be used by auto-exposure algorithm param[in] sensor the RealSense sensor param[out] min_x lower horizontal bound in pixels param[out] min_y lower vertical bound in pixels param[out] max_x upper horizontal bound in pixels param[out] max_y upper vertical bound in pixels param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_region_of_interest"},
     {"title": "rs_sensor.rs2_open", "text": "open subdevice for exclusive access, by committing to a configuration param[in] device relevant RealSense device param[in] profile stream profile that defines single stream configuration param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_open"},
     {"title": "rs_sensor.rs2_open_multiple", "text": "open subdevice for exclusive access, by committing to composite configuration, specifying one or more stream profiles this method should be used for interdependent streams, such as depth and infrared, that have to be configured together param[in] device relevant RealSense device param[in] profiles list of stream profiles discovered by get_stream_profiles param[in] count number of simultaneous stream profiles to configure param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_open_multiple"},
     {"title": "rs_sensor.rs2_close", "text": "stop any streaming from specified subdevice param[in] sensor RealSense device param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_close"},
     {"title": "rs_sensor.rs2_start", "text": "start streaming from specified configured sensor param[in] sensor RealSense device param[in] on_frame function pointer to register as per-frame callback param[in] user auxiliary data the user wishes to receive together with every frame callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_start"},
     {"title": "rs_sensor.rs2_start_queue", "text": "start streaming from specified configured sensor of specific stream to frame queue param[in] sensor RealSense Sensor param[in] queue frame-queue to store new frames into param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_start_queue"},
     {"title": "rs_sensor.rs2_stop", "text": "stops streaming from specified configured device param[in] sensor RealSense sensor param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_stop"},
     {"title": "rs_sensor.rs2_set_notifications_callback", "text": "set callback to get notifications from specified sensor param[in] sensor RealSense device param[in] on_notification function pointer to register as per-notifications callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_set_notifications_callback"},
     {"title": "rs_sensor.rs2_get_notification_description", "text": "retrieve description from notification handle param[in] notification handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the notification description    ", "tags": "", "url": "rs_sensor.html#rs2_get_notification_description"},
     {"title": "rs_sensor.rs2_get_notification_timestamp", "text": "retrieve timestamp from notification handle param[in] notification handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the notification timestamp    ", "tags": "", "url": "rs_sensor.html#rs2_get_notification_timestamp"},
     {"title": "rs_sensor.rs2_get_notification_severity", "text": "retrieve severity from notification handle param[in] notification handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the notification severity    ", "tags": "", "url": "rs_sensor.html#rs2_get_notification_severity"},
     {"title": "rs_sensor.rs2_get_notification_category", "text": "retrieve category from notification handle param[in] notification handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the notification category    ", "tags": "", "url": "rs_sensor.html#rs2_get_notification_category"},
     {"title": "rs_sensor.rs2_get_notification_serialized_data", "text": "retrieve serialized data from notification handle param[in] notification handle returned from a callback param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the serialized data (in JSON format)    ", "tags": "", "url": "rs_sensor.html#rs2_get_notification_serialized_data"},
     {"title": "rs_sensor.rs2_get_stream_profiles", "text": "check if physical subdevice is supported param[in] sensor input RealSense subdevice param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return list of stream profiles that given subdevice can provide, should be released by rs2_delete_profiles_list    ", "tags": "", "url": "rs_sensor.html#rs2_get_stream_profiles"},
     {"title": "rs_sensor.rs2_get_debug_stream_profiles", "text": "retrieve list of debug stream profiles that given subdevice can provide param[in] sensor input RealSense subdevice param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return list of debug stream profiles that given subdevice can provide, should be released by rs2_delete_profiles_list    ", "tags": "", "url": "rs_sensor.html#rs2_get_debug_stream_profiles"},
     {"title": "rs_sensor.rs2_get_active_streams", "text": "check how subdevice is streaming param[in] sensor input RealSense subdevice param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return list of stream profiles that given subdevice is currently streaming, should be released by rs2_delete_profiles_list    ", "tags": "", "url": "rs_sensor.html#rs2_get_active_streams"},
     {"title": "rs_sensor.rs2_get_stream_profile", "text": "Get pointer to specific stream profile param[in] list the list of supported profiles returned by rs2_get_supported_profiles param[in] index the zero based index of the streaming mode param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_stream_profile"},
     {"title": "rs_sensor.rs2_get_stream_profile_data", "text": "Extract common parameters of a stream profiles param[in] mode input stream profile param[out] stream stream type of the input profile param[out] format binary data format of the input profile param[out] index stream index the input profile in case there are multiple streams of the same type param[out] unique_id identifier for the stream profile, unique within the application param[out] framerate expected rate for data frames to arrive, meaning expected number of frames per second param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_stream_profile_data"},
     {"title": "rs_sensor.rs2_clone_stream_profile", "text": "Creates a copy of stream profile, assigning new values to some of the fields param[in] mode input stream profile param[in] stream stream type for the profile param[in] format binary data format of the profile param[in] index stream index the profile in case there are multiple streams of the same type param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return new stream profile, must be deleted by rs2_delete_stream_profile    ", "tags": "", "url": "rs_sensor.html#rs2_clone_stream_profile"},
     {"title": "rs_sensor.rs2_clone_video_stream_profile", "text": "Creates a copy of stream profile, assigning new values to some of the fields param[in] mode input stream profile param[in] stream stream type for the profile param[in] format binary data format of the profile param[in] width new width for the profile param[in] height new height for the profile param[in] intr new intrinsics for the profile param[in] index stream index the profile in case there are multiple streams of the same type param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return new stream profile, must be deleted by rs2_delete_stream_profile    ", "tags": "", "url": "rs_sensor.html#rs2_clone_video_stream_profile"},
     {"title": "rs_sensor.rs2_delete_stream_profile", "text": "Delete stream profile allocated by rs2_clone_stream_profile Should not be called on stream profiles returned by the device param[in] mode input stream profile    ", "tags": "", "url": "rs_sensor.html#rs2_delete_stream_profile"},
     {"title": "rs_sensor.rs2_stream_profile_is", "text": "Try to extend stream profile to an extension type param[in] mode input stream profile param[in] type extension type, for example RS2_EXTENSION_VIDEO_STREAM_PROFILE param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return non-zero if profile is extendable to specified extension, zero otherwise    ", "tags": "", "url": "rs_sensor.html#rs2_stream_profile_is"},
     {"title": "rs_sensor.rs2_get_video_stream_resolution", "text": "When called on a video stream profile, will return the width and the height of the stream param[in] mode input stream profile param[out] width width in pixels of the video stream param[out] height height in pixels of the video stream param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_video_stream_resolution"},
     {"title": "rs_sensor.rs2_get_motion_intrinsics", "text": "Obtain the intrinsics of a specific stream configuration from the device. param[in] mode input stream profile param[out] intrinsics Pointer to the struct to store the data in param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_motion_intrinsics"},
     {"title": "rs_sensor.rs2_is_stream_profile_default", "text": "Returns non-zero if selected profile is recommended for the sensor This is an optional hint we offer to suggest profiles with best performance-quality tradeof param[in] mode input stream profile param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return non-zero if selected profile is recommended for the sensor    ", "tags": "", "url": "rs_sensor.html#rs2_is_stream_profile_default"},
     {"title": "rs_sensor.rs2_get_stream_profiles_count", "text": "get the number of supported stream profiles param[in] list the list of supported profiles returned by rs2_get_supported_profiles param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return number of supported subdevice profiles    ", "tags": "", "url": "rs_sensor.html#rs2_get_stream_profiles_count"},
     {"title": "rs_sensor.rs2_delete_stream_profile_list", "text": "delete stream profiles list param[in] list the list of supported profiles returned by rs2_get_supported_profiles    ", "tags": "", "url": "rs_sensor.html#rs2_delete_stream_profile_list"},
     {"title": "rs_sensor.rs2_get_extrinsics", "text": "param[in] from origin stream profile param[in] to target stream profile param[out] extrin extrinsics from origin to target param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_extrinsics"},
     {"title": "rs_sensor.rs2_register_extrinsics", "text": "param[in] from origin stream profile param[in] to target stream profile param[out] extrin extrinsics from origin to target param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_register_extrinsics"},
     {"title": "rs_sensor.rs2_override_extrinsics", "text": "Override extrinsics of a given sensor that supports calibrated_sensor.    This will affect extrinsics at the source device and may affect multiple profiles. Used for DEPTH_TO_RGB calibration.    param[in] sensor The sensor param[in] extrinsics Extrinsics from Depth to the named sensor param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_override_extrinsics"},
     {"title": "rs_sensor.rs2_get_video_stream_intrinsics", "text": "When called on a video profile, returns the intrinsics of specific stream configuration param[in] mode input stream profile param[out] intrinsics resulting intrinsics for the video profile param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_video_stream_intrinsics"},
     {"title": "rs_sensor.rs2_get_recommended_processing_blocks", "text": "Returns the list of recommended processing blocks for a specific sensor. Order and configuration of the blocks are decided by the sensor param[in] sensor input sensor param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return list of supported sensor recommended processing blocks    ", "tags": "", "url": "rs_sensor.html#rs2_get_recommended_processing_blocks"},
     {"title": "rs_sensor.rs2_get_processing_block", "text": "Returns specific processing blocks from processing blocks list param[in] list the processing blocks list param[in] index the requested processing block param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return processing block    ", "tags": "", "url": "rs_sensor.html#rs2_get_processing_block"},
     {"title": "rs_sensor.rs2_get_recommended_processing_blocks_count", "text": "Returns the processing blocks list size param[in] list the processing blocks list param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the processing block list size    ", "tags": "", "url": "rs_sensor.html#rs2_get_recommended_processing_blocks_count"},
     {"title": "rs_sensor.rs2_delete_recommended_processing_blocks", "text": "Deletes processing blocks list param[in] list list to delete    ", "tags": "", "url": "rs_sensor.html#rs2_delete_recommended_processing_blocks"},
     {"title": "rs_sensor.rs2_import_localization_map", "text": "Imports a localization map from file to tm2 tracking device param[in] sensor TM2 position-tracking sensor param[in] lmap_blob Localization map raw buffer, serialized param[in] blob_size The buffer's size in bytes param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Non-zero if succeeded, otherwise 0    ", "tags": "", "url": "rs_sensor.html#rs2_import_localization_map"},
     {"title": "rs_sensor.rs2_export_localization_map", "text": "Extract and store the localization map of tm2 tracking device to file param[in] sensor TM2 position-tracking sensor param[in] lmap_fname The file name of the localization map param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Device's response in a rs2_raw_data_buffer, which should be released by rs2_delete_raw_data    ", "tags": "", "url": "rs_sensor.html#rs2_export_localization_map"},
     {"title": "rs_sensor.rs2_set_static_node", "text": "Create a named location tag param[in] sensor T2xx position-tracking sensor param[in] guid Null-terminated string of up to 127 characters param[in] pos Position in meters, relative to the current tracking session param[in] orient Quaternion orientation, expressed the the coordinate system of the current tracking session param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Non-zero if succeeded, otherwise 0    ", "tags": "", "url": "rs_sensor.html#rs2_set_static_node"},
     {"title": "rs_sensor.rs2_get_static_node", "text": "Retrieve a named location tag param[in] sensor T2xx position-tracking sensor param[in] guid Null-terminated string of up to 127 characters param[out] pos Position in meters of the tagged (stored) location param[out] orient Quaternion orientation of the tagged (stored) location param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Non-zero if succeeded, otherwise 0    ", "tags": "", "url": "rs_sensor.html#rs2_get_static_node"},
     {"title": "rs_sensor.rs2_remove_static_node", "text": "Remove a named location tag param[in] sensor T2xx position-tracking sensor param[in] guid Null-terminated string of up to 127 characters param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored return Non-zero if succeeded, otherwise 0    ", "tags": "", "url": "rs_sensor.html#rs2_remove_static_node"},
     {"title": "rs_sensor.rs2_load_wheel_odometry_config", "text": "/** Load Wheel odometer settings from host to device * \\param[in] odometry_config_buf odometer configuration/calibration blob serialized from jsom file * \\return true on success */ int rs2_load_wheel_odometry_config(const rs2_sensor* sensor, const unsigned char* odometry_config_buf, unsigned int blob_size, rs2_error** error);    ", "tags": "", "url": "rs_sensor.html#rs2_load_wheel_odometry_config"},
     {"title": "rs_sensor.rs2_send_wheel_odometry", "text": "param[in] wo_sensor_id - Zero-based index of (wheel) sensor with the same type within device param[in] frame_num - Monotonocally increasing frame number, managed per sensor. param[in] translational_velocity - Translational velocity of the wheel sensor [meter/sec] return true on success    ", "tags": "", "url": "rs_sensor.html#rs2_send_wheel_odometry"},
     {"title": "rs_sensor.rs2_set_intrinsics", "text": "Set intrinsics of a given sensor param[in] sensor The RealSense device param[in] profile Target stream profile param[in] intrinsics Intrinsics value to be written to the device param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_set_intrinsics"},
     {"title": "rs_sensor.rs2_override_intrinsics", "text": "Override intrinsics of a given sensor that supports calibrated_sensor.    This will affect intrinsics at the source and may affect multiple profiles. Used for DEPTH_TO_RGB calibration.    param[in] sensor The RealSense device param[in] intrinsics Intrinsics value to be written to the sensor param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_override_intrinsics"},
     {"title": "rs_sensor.rs2_get_dsm_params", "text": "Get the DSM parameters for a sensor param[in] sensor Sensor that supports the CALIBRATED_SENSOR extension param[out] p_params_out Pointer to the structure that will get the DSM parameters param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_get_dsm_params"},
     {"title": "rs_sensor.rs2_override_dsm_params", "text": "Set the sensor DSM parameters This should ideally be done when the stream is NOT running. If it is, the parameters may not take effect immediately. param[in] sensor Sensor that supports the CALIBRATED_SENSOR extension param[out] p_params Pointer to the structure that contains the DSM parameters param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_override_dsm_params"},
     {"title": "rs_sensor.rs2_reset_sensor_calibration", "text": "Reset the sensor DSM parameters This should ideally be done when the stream is NOT running. May not take effect immediately. param[in] sensor Sensor that supports the CALIBRATED_SENSOR extension param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_reset_sensor_calibration"},
     {"title": "rs_sensor.rs2_set_motion_device_intrinsics", "text": "Set motion device intrinsics param[in] sensor Motion sensor param[in] profile Motion stream profile param[out] intrinsics Pointer to the struct to store the data in param[out] error If non-null, receives any error that occurs during this call, otherwise, errors are ignored    ", "tags": "", "url": "rs_sensor.html#rs2_set_motion_device_intrinsics"},
     {"title": "rs_sensor.rs2_get_max_usable_depth_range", "text": "When called on a depth sensor, this method will return the maximum range of the camera given the amount of ambient light in the scene param[in] sensor depth sensor param[out] error if non-null, receives any error that occurs during this call, otherwise, errors are ignored return the max usable range in meters    ", "tags": "", "url": "rs_sensor.html#rs2_get_max_usable_depth_range"},
     {"title": "rs_sensor.Trs2_camera_info", "text": "brief Read-only strings that can be queried from the device. Not all information attributes are available on all camera types. This information is mainly available for camera debug and troubleshooting and should not be used in applications.    RS2_CAMERA_INFO_NAME  Friendly name  RS2_CAMERA_INFO_SERIAL_NUMBER  Device serial number  RS2_CAMERA_INFO_FIRMWARE_VERSION  Primary firmware version  RS2_CAMERA_INFO_RECOMMENDED_FIRMWARE_VERSION  Recommended firmware version  RS2_CAMERA_INFO_PHYSICAL_PORT  Unique identifier of the port the device is connected to (platform specific)  RS2_CAMERA_INFO_DEBUG_OP_CODE  If device supports firmware logging,// this is the command to send to get logs from firmware  RS2_CAMERA_INFO_ADVANCED_MODE  True iff the device is in advanced mode  RS2_CAMERA_INFO_PRODUCT_ID  Product ID as reported in the USB descriptor  RS2_CAMERA_INFO_CAMERA_LOCKED  True iff EEPROM is locked  RS2_CAMERA_INFO_USB_TYPE_DESCRIPTOR  Designated USB specification: USB2/USB3  RS2_CAMERA_INFO_PRODUCT_LINE  Device product line D400/SR300/L500/T200  RS2_CAMERA_INFO_ASIC_SERIAL_NUMBER  ASIC serial number  RS2_CAMERA_INFO_FIRMWARE_UPDATE_ID  Firmware update ID  RS2_CAMERA_INFO_IP_ADDRESS  IP address for remote camera.  RS2_CAMERA_INFO_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. ", "tags": "", "url": "rs_sensor.html#Trs2_camera_info"},
     {"title": "rs_sensor.Trs2_stream", "text": "brief Streams are different types of data provided by RealSense devices./    RS2_STREAM_ANY    RS2_STREAM_DEPTH  Native stream of depth data produced by RealSense device */  RS2_STREAM_COLOR  Native stream of color data captured by RealSense device */  RS2_STREAM_INFRARED  Native stream of infrared data captured by RealSense device */  RS2_STREAM_FISHEYE  Native stream of fish-eye (wide) data captured from the dedicate motion camera */  RS2_STREAM_GYRO  Native stream of gyroscope motion data produced by RealSense device */  RS2_STREAM_ACCEL  Native stream of accelerometer motion data produced by RealSense device */  RS2_STREAM_GPIO  Signals from external device connected through GPIO */  RS2_STREAM_POSE  6 Degrees of Freedom pose data, calculated by RealSense device */  RS2_STREAM_CONFIDENCE  4 bit per-pixel depth confidence level */  RS2_STREAM_COUNT   ", "tags": "", "url": "rs_sensor.html#Trs2_stream"},
     {"title": "rs_sensor.Trs2_format", "text": "A stream's format identifies how binary data is encoded within a frame. */    RS2_FORMAT_ANY  When passed to enable stream, librealsense will try to provide best suited format */  RS2_FORMAT_Z16  16-bit linear depth values. The depth is meters is equal to depth scale * pixel value. */  RS2_FORMAT_DISPARITY16  16-bit float-point disparity values. Depth-&gt;Disparity conversion : Disparity = Baseline*FocalLength/Depth. */  RS2_FORMAT_XYZ32F  32-bit floating point 3D coordinates. */  RS2_FORMAT_YUYV  32-bit y0, u, y1, v data for every two pixels. Similar to YUV422 but packed in a different order - https://en.wikipedia.org/wiki/YUV */  RS2_FORMAT_RGB8  8-bit red, green and blue channels */  RS2_FORMAT_BGR8  8-bit blue, green, and red channels &ndash; suitable for OpenCV */  RS2_FORMAT_RGBA8  8-bit red, green and blue channels + constant alpha channel equal to FF */  RS2_FORMAT_BGRA8  8-bit blue, green, and red channels + constant alpha channel equal to FF */  RS2_FORMAT_Y8  8-bit per-pixel grayscale image */  RS2_FORMAT_Y16  16-bit per-pixel grayscale image */  RS2_FORMAT_RAW10  Four 10 bits per pixel luminance values packed into a 5-byte macropixel */  RS2_FORMAT_RAW16  16-bit raw image */  RS2_FORMAT_RAW8  8-bit raw image */  RS2_FORMAT_UYVY  Similar to the standard YUYV pixel format, but packed in a different order */  RS2_FORMAT_MOTION_RAW  Raw data from the motion sensor */  RS2_FORMAT_MOTION_XYZ32F  Motion data packed as 3 32-bit float values, for X, Y, and Z axis */  RS2_FORMAT_GPIO_RAW  Raw data from the external sensors hooked to one of the GPIO's */  RS2_FORMAT_6DOF  Pose data packed as floats array, containing translation vector, rotation quaternion and prediction velocities and accelerations vectors */  RS2_FORMAT_DISPARITY32  32-bit float-point disparity values. Depth-&gt;Disparity conversion : Disparity = Baseline*FocalLength/Depth */  RS2_FORMAT_Y10BPACK  16-bit per-pixel grayscale image unpacked from 10 bits per pixel packed ([8:8:8:8:2222]) grey-scale image. The data is unpacked to LSB and padded with 6 zero bits */  RS2_FORMAT_DISTANCE  32-bit float-point depth distance value. */  RS2_FORMAT_MJPEG  Bitstream encoding for video in which an image of each frame is encoded as JPEG-DIB */  RS2_FORMAT_Y8I  8-bit per pixel interleaved. 8-bit left, 8-bit right. */  RS2_FORMAT_Y12I  12-bit per pixel interleaved. 12-bit left, 12-bit right. Each pixel is stored in a 24-bit word in little-endian order. */  RS2_FORMAT_INZI  multi-planar Depth 16bit + IR 10bit. */  RS2_FORMAT_INVI  8-bit IR stream. */  RS2_FORMAT_W10  Grey-scale image as a bit-packed array. 4 pixel data stream taking 5 bytes */  RS2_FORMAT_Z16H  Variable-length Huffman-compressed 16-bit depth values. */  RS2_FORMAT_FG  16-bit per-pixel frame grabber format. */  RS2_FORMAT_Y411  12-bit per-pixel. */  RS2_FORMAT_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. */ ", "tags": "", "url": "rs_sensor.html#Trs2_format"},
     {"title": "rs_sensor.pRS2_extrinsics", "text": "   ", "tags": "", "url": "rs_sensor.html#pRS2_extrinsics"},
     {"title": "rs_types", "text": "Exposes RealSense structs   ", "tags": "", "url": "rs_types.html"},
     {"title": "rs_types.Trs2_intrinsics", "text": "Video stream intrinsics.   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html"},
     {"title": "rs_types.Trs2_intrinsics.Width", "text": "Width of the image in pixels */   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html#Width"},
     {"title": "rs_types.Trs2_intrinsics.Height", "text": "Height of the image in pixels */   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html#Height"},
     {"title": "rs_types.Trs2_intrinsics.ppx", "text": "Horizontal coordinate of the principal point of the image, as a pixel offset from the left edge */   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html#ppx"},
     {"title": "rs_types.Trs2_intrinsics.ppy", "text": "Vertical coordinate of the principal point of the image, as a pixel offset from the top edge */   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html#ppy"},
     {"title": "rs_types.Trs2_intrinsics.fx", "text": "Focal length of the image plane, as a multiple of pixel width */   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html#fx"},
     {"title": "rs_types.Trs2_intrinsics.fy", "text": "Focal length of the image plane, as a multiple of pixel height */   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html#fy"},
     {"title": "rs_types.Trs2_intrinsics.model", "text": "Distortion model of the image */   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html#model"},
     {"title": "rs_types.Trs2_intrinsics.coeffs", "text": "Distortion coefficients. Order for Brown-Conrady: [k1, k2, p1, p2, k3]. Order for F-Theta Fish-eye: [k1, k2, k3, k4, 0]. Other models are subject to their own interpretations */   ", "tags": "", "url": "rs_types.Trs2_intrinsics.html#coeffs"},
     {"title": "rs_types.Trs2_motion_device_intrinsic", "text": "\\brief Motion device intrinsics: scale, bias, and variances. */    /* \\internal * Scale X cross axis cross axis Bias X \\n * cross axis Scale Y cross axis Bias Y \\n * cross axis cross axis Scale Z Bias Z */ float data[3][4]; /**&lt; Interpret data array values */ float noise_variances[3]; /**&lt; Variance of noise for X, Y, and Z axis */ float bias_variances[3]; /**&lt; Variance of bias for X, Y, and Z axis */   ", "tags": "", "url": "rs_types.Trs2_motion_device_intrinsic.html"},
     {"title": "rs_types.Trs2_motion_device_intrinsic.Data", "text": "Interpret data array values   ", "tags": "", "url": "rs_types.Trs2_motion_device_intrinsic.html#Data"},
     {"title": "rs_types.Trs2_motion_device_intrinsic.noise_variances", "text": "Variance of noise for X, Y, and Z axis   ", "tags": "", "url": "rs_types.Trs2_motion_device_intrinsic.html#noise_variances"},
     {"title": "rs_types.Trs2_motion_device_intrinsic.bias_variances", "text": "Variance of bias for X, Y, and Z axis   ", "tags": "", "url": "rs_types.Trs2_motion_device_intrinsic.html#bias_variances"},
     {"title": "rs_types.Trs2_dsm_params", "text": "Video DSM (Digital Sync Module) parameters for calibration (same layout as in FW ac_depth_params) This is the block in MC that converts angles to dimensionless integers reported to MA (using &quot;DSM coefficients&quot;)   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html"},
     {"title": "rs_types.Trs2_dsm_params.timestamp", "text": "system_clock::time_point::time_since_epoch().count()   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#timestamp"},
     {"title": "rs_types.Trs2_dsm_params.version", "text": "MAJOR&lt;&lt;12 | MINOR&lt;&lt;4 | PATCH   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#version"},
     {"title": "rs_types.Trs2_dsm_params.model", "text": "   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#model"},
     {"title": "rs_types.flags", "text": "TBD, now 0s   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#flags"},
     {"title": "rs_types.Trs2_dsm_params.h_scale", "text": "the scale factor to horizontal DSM scale thermal results   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#h_scale"},
     {"title": "rs_types.Trs2_dsm_params.v_scale", "text": "the scale factor to vertical DSM scale thermal results   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#v_scale"},
     {"title": "rs_types.Trs2_dsm_params.h_offset", "text": "the offset to horizontal DSM offset thermal results   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#h_offset"},
     {"title": "rs_types.Trs2_dsm_params.v_offset", "text": "the offset to vertical DSM offset thermal results   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#v_offset"},
     {"title": "rs_types.Trs2_dsm_params.rtd_offset", "text": "the offset to the Round-Trip-Distance delay thermal results   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#rtd_offset"},
     {"title": "rs_types.Trs2_dsm_params.temp_x2", "text": "the temperature recorded times 2 (ldd for depth; hum for rgb)   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#temp_x2"},
     {"title": "rs_types.Trs2_dsm_params.mc_h_scale", "text": "the scale factor to horizontal LOS coefficients in MC   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#mc_h_scale"},
     {"title": "rs_types.Trs2_dsm_params.mc_v_scale", "text": "the scale factor to vertical LOS coefficients in MC   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#mc_v_scale"},
     {"title": "rs_types.Trs2_dsm_params.weeks_since_calibration", "text": "time (in weeks) since factory calibration   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#weeks_since_calibration"},
     {"title": "rs_types.Trs2_dsm_params.ac_weeks_since_calibaration", "text": "time (in weeks) between factory calibration and last AC event   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#ac_weeks_since_calibaration"},
     {"title": "rs_types.Trs2_dsm_params.reserved", "text": "   ", "tags": "", "url": "rs_types.Trs2_dsm_params.html#reserved"},
     {"title": "rs_types.Trs2_vector", "text": "3D vector in Euclidean coordinate space   ", "tags": "", "url": "rs_types.Trs2_vector.html"},
     {"title": "rs_types.Trs2_vector.x", "text": "   ", "tags": "", "url": "rs_types.Trs2_vector.html#x"},
     {"title": "rs_types.Trs2_vector.y", "text": "   ", "tags": "", "url": "rs_types.Trs2_vector.html#y"},
     {"title": "rs_types.Trs2_vector.z", "text": "   ", "tags": "", "url": "rs_types.Trs2_vector.html#z"},
     {"title": "rs_types.Trs2_quaternion", "text": "Quaternion used to represent rotation   ", "tags": "", "url": "rs_types.Trs2_quaternion.html"},
     {"title": "rs_types.Trs2_quaternion.x", "text": "   ", "tags": "", "url": "rs_types.Trs2_quaternion.html#x"},
     {"title": "rs_types.Trs2_quaternion.y", "text": "   ", "tags": "", "url": "rs_types.Trs2_quaternion.html#y"},
     {"title": "rs_types.Trs2_quaternion.z", "text": "   ", "tags": "", "url": "rs_types.Trs2_quaternion.html#z"},
     {"title": "rs_types.Trs2_quaternion.w", "text": "   ", "tags": "", "url": "rs_types.Trs2_quaternion.html#w"},
     {"title": "rs_types.Trs2_pose_stream", "text": "All the parameters required to define a pose stream.   ", "tags": "", "url": "rs_types.Trs2_pose_stream.html"},
     {"title": "rs_types.Trs2_pose_stream.aType", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose_stream.html#aType"},
     {"title": "rs_types.Trs2_pose_stream.index", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose_stream.html#index"},
     {"title": "rs_types.Trs2_pose_stream.uid", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose_stream.html#uid"},
     {"title": "rs_types.Trs2_pose_stream.fps", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose_stream.html#fps"},
     {"title": "rs_types.Trs2_pose_stream.fmt", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose_stream.html#fmt"},
     {"title": "rs_types.Trs2_pose", "text": "translation; //&lt; X, Y, Z values of translation, in meters (relative to initial position) */ velocity; //&lt; X, Y, Z values of velocity, in meters/sec */ acceleration; //&lt; X, Y, Z values of acceleration, in meters/sec&circ;2 */ rotation; //&lt; Qi, Qj, Qk, Qr components of rotation as represented in quaternion rotation (relative to initial position) */ angular_velocity; //&lt; X, Y, Z values of angular velocity, in radians/sec */ angular_acceleration; //&lt; X, Y, Z values of angular acceleration, in radians/sec&circ;2 */ tracker_confidence; //&lt; Pose confidence 0x0 - Failed, 0x1 - Low, 0x2 - Medium, 0x3 - High */ mapper_confidence; //&lt; Pose map confidence 0x0 - Failed, 0x1 - Low, 0x2 - Medium, 0x3 - High */   ", "tags": "", "url": "rs_types.Trs2_pose.html"},
     {"title": "rs_types.Trs2_pose.translation", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose.html#translation"},
     {"title": "rs_types.Trs2_pose.velocity", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose.html#velocity"},
     {"title": "rs_types.Trs2_pose.acceleration", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose.html#acceleration"},
     {"title": "rs_types.Trs2_pose.rotation", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose.html#rotation"},
     {"title": "rs_types.Trs2_pose.angular_velocity", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose.html#angular_velocity"},
     {"title": "rs_types.Trs2_pose.tracker_confidence", "text": "   ", "tags": "", "url": "rs_types.Trs2_pose.html#tracker_confidence"},
     {"title": "rs_types.Trs2_pose.mapper_confidence", "text": "?? unsigned int   ", "tags": "", "url": "rs_types.Trs2_pose.html#mapper_confidence"},
     {"title": "rs_types.Trs2_vertex", "text": "3D coordinates with origin at topmost left corner of the lense, with positive Z pointing away from the camera, positive X pointing camera right and positive Y pointing camera down   ", "tags": "", "url": "rs_types.Trs2_vertex.html"},
     {"title": "rs_types.Trs2_vertex.xyx", "text": "   ", "tags": "", "url": "rs_types.Trs2_vertex.html#xyx"},
     {"title": "rs_types.Trs2_pixel", "text": "Pixel location within 2D image. (0,0) is the topmost, left corner. Positive X is right, positive Y is down *   ", "tags": "", "url": "rs_types.Trs2_pixel.html"},
     {"title": "rs_types.Trs2_pixel.ij", "text": "   ", "tags": "", "url": "rs_types.Trs2_pixel.html#ij"},
     {"title": "rs_types.rs2_notification_category_to_string", "text": "    ", "tags": "", "url": "rs_types.html#rs2_notification_category_to_string"},
     {"title": "rs_types.rs2_extension_type_to_string", "text": "    ", "tags": "", "url": "rs_types.html#rs2_extension_type_to_string"},
     {"title": "rs_types.rs2_extension_to_string", "text": "    ", "tags": "", "url": "rs_types.html#rs2_extension_to_string"},
     {"title": "rs_types.rs2_format_to_string", "text": "    ", "tags": "", "url": "rs_types.html#rs2_format_to_string"},
     {"title": "rs_types.rs2_distortion_to_string", "text": "    ", "tags": "", "url": "rs_types.html#rs2_distortion_to_string"},
     {"title": "rs_types.rs2_stream_to_string", "text": "    ", "tags": "", "url": "rs_types.html#rs2_stream_to_string"},
     {"title": "rs_types.rs2_log_severity_to_string", "text": "**&lt; Include any/all log messages    ", "tags": "", "url": "rs_types.html#rs2_log_severity_to_string"},
     {"title": "rs_types.rs2_get_error_message", "text": "    ", "tags": "", "url": "rs_types.html#rs2_get_error_message"},
     {"title": "rs_types.rs2_get_failed_function", "text": "    ", "tags": "", "url": "rs_types.html#rs2_get_failed_function"},
     {"title": "rs_types.rs2_get_failed_args", "text": "    ", "tags": "", "url": "rs_types.html#rs2_get_failed_args"},
     {"title": "rs_types.rs2_free_error", "text": "    ", "tags": "", "url": "rs_types.html#rs2_free_error"},
     {"title": "rs_types.rs2_exception_type_to_string", "text": "    ", "tags": "", "url": "rs_types.html#rs2_exception_type_to_string"},
     {"title": "rs_types.pRS2_error", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_error"},
     {"title": "rs_types.pRS2_context", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_context"},
     {"title": "rs_types.pRS2_device_list", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_device_list"},
     {"title": "rs_types.pRS2_device_info", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_device_info"},
     {"title": "rs_types.pRS2_device", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_device"},
     {"title": "rs_types.pvoid", "text": "   ", "tags": "", "url": "rs_types.html#pvoid"},
     {"title": "rs_types.pRS2_device_hub", "text": "?? void*   ", "tags": "", "url": "rs_types.html#pRS2_device_hub"},
     {"title": "rs_types.pRS2_pipeline", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_pipeline"},
     {"title": "rs_types.pRS2_exception_type", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_exception_type"},
     {"title": "rs_types.pRS2_config", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_config"},
     {"title": "rs_types.pRS2_pipeline_profile", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_pipeline_profile"},
     {"title": "rs_types.pRS2_frame", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_frame"},
     {"title": "rs_types.pRS2_raw_data_buffer", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_raw_data_buffer"},
     {"title": "rs_types.pRS2_sensor_list", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_sensor_list"},
     {"title": "rs_types.pRS2_frame_queue", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_frame_queue"},
     {"title": "rs_types.pRS2_sensor", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_sensor"},
     {"title": "rs_types.pRS2_stream_profile", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_stream_profile"},
     {"title": "rs_types.prs2_stream_profile_list", "text": "   ", "tags": "", "url": "rs_types.html#prs2_stream_profile_list"},
     {"title": "rs_types.pRS2_source", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_source"},
     {"title": "rs_types.pRS2_notification", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_notification"},
     {"title": "rs_types.pRS2_processing_block_list", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_processing_block_list"},
     {"title": "rs_types.pRS2_processing_block", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_processing_block"},
     {"title": "rs_types.pRS2_frame_processor_callback", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_frame_processor_callback"},
     {"title": "rs_types.pRS2_frame_processor_callback_ptr", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_frame_processor_callback_ptr"},
     {"title": "rs_types.Trs2_time_t", "text": "Timestamp format. units are milliseconds   ", "tags": "", "url": "rs_types.html#Trs2_time_t"},
     {"title": "rs_types.Trs2_metadata_type", "text": "Metadata attribute type is defined as 64 bit signed integer   ", "tags": "", "url": "rs_types.html#Trs2_metadata_type"},
     {"title": "rs_types.Trs2_notification_category", "text": "Category of the librealsense notification.    RS2_NOTIFICATION_CATEGORY_FRAMES_TIMEOUT  Frames didn't arrived within 5 seconds  RS2_NOTIFICATION_CATEGORY_FRAME_CORRUPTED  Received partial/incomplete frame  RS2_NOTIFICATION_CATEGORY_HARDWARE_ERROR  Error reported from the device  RS2_NOTIFICATION_CATEGORY_HARDWARE_EVENT  General Hardeware notification that is not an error  RS2_NOTIFICATION_CATEGORY_UNKNOWN_ERROR  Received unknown error from the device  RS2_NOTIFICATION_CATEGORY_FIRMWARE_UPDATE_RECOMMENDED  Current firmware version installed is not the latest available  RS2_NOTIFICATION_CATEGORY_POSE_RELOCALIZATION  A relocalization event has updated the pose provided by a pose sensor  RS2_NOTIFICATION_CATEGORY_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. ", "tags": "", "url": "rs_types.html#Trs2_notification_category"},
     {"title": "rs_types.Trs2_extension", "text": "Specifies advanced interfaces (capabilities) objects may implement.    RS2_EXTENSION_UNKNOWN    RS2_EXTENSION_DEBUG    RS2_EXTENSION_INFO    RS2_EXTENSION_MOTION    RS2_EXTENSION_OPTIONS    RS2_EXTENSION_VIDEO    RS2_EXTENSION_ROI    RS2_EXTENSION_DEPTH_SENSOR    RS2_EXTENSION_VIDEO_FRAME    RS2_EXTENSION_MOTION_FRAME    RS2_EXTENSION_COMPOSITE_FRAME    RS2_EXTENSION_POINTS    RS2_EXTENSION_DEPTH_FRAME    RS2_EXTENSION_ADVANCED_MODE    RS2_EXTENSION_RECORD    RS2_EXTENSION_VIDEO_PROFILE    RS2_EXTENSION_PLAYBACK    RS2_EXTENSION_DEPTH_STEREO_SENSOR    RS2_EXTENSION_DISPARITY_FRAME    RS2_EXTENSION_MOTION_PROFILE    RS2_EXTENSION_POSE_FRAME    RS2_EXTENSION_POSE_PROFILE    RS2_EXTENSION_TM2    RS2_EXTENSION_SOFTWARE_DEVICE    RS2_EXTENSION_SOFTWARE_SENSOR    RS2_EXTENSION_DECIMATION_FILTER    RS2_EXTENSION_THRESHOLD_FILTER    RS2_EXTENSION_DISPARITY_FILTER    RS2_EXTENSION_SPATIAL_FILTER    RS2_EXTENSION_TEMPORAL_FILTER    RS2_EXTENSION_HOLE_FILLING_FILTER    RS2_EXTENSION_ZERO_ORDER_FILTER    RS2_EXTENSION_RECOMMENDED_FILTERS    RS2_EXTENSION_POSE    RS2_EXTENSION_POSE_SENSOR    RS2_EXTENSION_WHEEL_ODOMETER    RS2_EXTENSION_GLOBAL_TIMER    RS2_EXTENSION_UPDATABLE    RS2_EXTENSION_UPDATE_DEVICE    RS2_EXTENSION_L500_DEPTH_SENSOR    RS2_EXTENSION_TM2_SENSOR    RS2_EXTENSION_AUTO_CALIBRATED_DEVICE    RS2_EXTENSION_COLOR_SENSOR    RS2_EXTENSION_MOTION_SENSOR    RS2_EXTENSION_FISHEYE_SENSOR    RS2_EXTENSION_DEPTH_HUFFMAN_DECODER    RS2_EXTENSION_SERIALIZABLE    RS2_EXTENSION_FW_LOGGER    RS2_EXTENSION_AUTO_CALIBRATION_FILTER    RS2_EXTENSION_DEVICE_CALIBRATION    RS2_EXTENSION_CALIBRATED_SENSOR    RS2_EXTENSION_HDR_MERGE    RS2_EXTENSION_SEQUENCE_ID_FILTER    RS2_EXTENSION_MAX_USABLE_RANGE_SENSOR    RS2_EXTENSION_DEBUG_STREAM_SENSOR    RS2_EXTENSION_CALIBRATION_CHANGE_DEVICE    RS2_EXTENSION_COUNT   ", "tags": "", "url": "rs_types.html#Trs2_extension"},
     {"title": "rs_types.Trs2_format", "text": "A stream's format identifies how binary data is encoded within a frame. */    RS2_FORMAT_ANY  When passed to enable stream, librealsense will try to provide best suited format */  RS2_FORMAT_Z16  16-bit linear depth values. The depth is meters is equal to depth scale * pixel value. */  RS2_FORMAT_DISPARITY16  16-bit float-point disparity values. Depth-&gt;Disparity conversion : Disparity = Baseline*FocalLength/Depth. */  RS2_FORMAT_XYZ32F  32-bit floating point 3D coordinates. */  RS2_FORMAT_YUYV  32-bit y0, u, y1, v data for every two pixels. Similar to YUV422 but packed in a different order - https://en.wikipedia.org/wiki/YUV */  RS2_FORMAT_RGB8  8-bit red, green and blue channels */  RS2_FORMAT_BGR8  8-bit blue, green, and red channels &ndash; suitable for OpenCV */  RS2_FORMAT_RGBA8  8-bit red, green and blue channels + constant alpha channel equal to FF */  RS2_FORMAT_BGRA8  8-bit blue, green, and red channels + constant alpha channel equal to FF */  RS2_FORMAT_Y8  8-bit per-pixel grayscale image */  RS2_FORMAT_Y16  16-bit per-pixel grayscale image */  RS2_FORMAT_RAW10  Four 10 bits per pixel luminance values packed into a 5-byte macropixel */  RS2_FORMAT_RAW16  16-bit raw image */  RS2_FORMAT_RAW8  8-bit raw image */  RS2_FORMAT_UYVY  Similar to the standard YUYV pixel format, but packed in a different order */  RS2_FORMAT_MOTION_RAW  Raw data from the motion sensor */  RS2_FORMAT_MOTION_XYZ32F  Motion data packed as 3 32-bit float values, for X, Y, and Z axis */  RS2_FORMAT_GPIO_RAW  Raw data from the external sensors hooked to one of the GPIO's */  RS2_FORMAT_6DOF  Pose data packed as floats array, containing translation vector, rotation quaternion and prediction velocities and accelerations vectors */  RS2_FORMAT_DISPARITY32  32-bit float-point disparity values. Depth-&gt;Disparity conversion : Disparity = Baseline*FocalLength/Depth */  RS2_FORMAT_Y10BPACK  16-bit per-pixel grayscale image unpacked from 10 bits per pixel packed ([8:8:8:8:2222]) grey-scale image. The data is unpacked to LSB and padded with 6 zero bits */  RS2_FORMAT_DISTANCE  32-bit float-point depth distance value. */  RS2_FORMAT_MJPEG  Bitstream encoding for video in which an image of each frame is encoded as JPEG-DIB */  RS2_FORMAT_Y8I  8-bit per pixel interleaved. 8-bit left, 8-bit right. */  RS2_FORMAT_Y12I  12-bit per pixel interleaved. 12-bit left, 12-bit right. Each pixel is stored in a 24-bit word in little-endian order. */  RS2_FORMAT_INZI  multi-planar Depth 16bit + IR 10bit. */  RS2_FORMAT_INVI  8-bit IR stream. */  RS2_FORMAT_W10  Grey-scale image as a bit-packed array. 4 pixel data stream taking 5 bytes */  RS2_FORMAT_Z16H  Variable-length Huffman-compressed 16-bit depth values. */  RS2_FORMAT_FG  16-bit per-pixel frame grabber format. */  RS2_FORMAT_Y411  12-bit per-pixel. */  RS2_FORMAT_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. */ ", "tags": "", "url": "rs_types.html#Trs2_format"},
     {"title": "rs_types.pRS2_format", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_format"},
     {"title": "rs_types.Trs2_distortion", "text": "Distortion model: defines how pixel coordinates should be mapped to sensor coordinates. */    RS2_DISTORTION_NONE  Rectilinear images. No distortion compensation required. */  RS2_DISTORTION_MODIFIED_BROWN_CONRADY  Equivalent to Brown-Conrady distortion, except that tangential distortion is applied to radially distorted points */  RS2_DISTORTION_INVERSE_BROWN_CONRADY  Equivalent to Brown-Conrady distortion, except undistorts image instead of distorting it */  RS2_DISTORTION_FTHETA  F-Theta fish-eye distortion model */  RS2_DISTORTION_BROWN_CONRADY  Unmodified Brown-Conrady distortion model */  RS2_DISTORTION_KANNALA_BRANDT4  Four parameter Kannala Brandt distortion model */  RS2_DISTORTION_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. */ ", "tags": "", "url": "rs_types.html#Trs2_distortion"},
     {"title": "rs_types.PRS2_distortion", "text": "   ", "tags": "", "url": "rs_types.html#PRS2_distortion"},
     {"title": "rs_types.pRS2_intrinsics", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_intrinsics"},
     {"title": "rs_types.pRS2_frame_callback_ptr", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_frame_callback_ptr"},
     {"title": "rs_types.Trs2_frame_callback_ptr", "text": "    ", "tags": "", "url": "rs_types.html#Trs2_frame_callback_ptr"},
     {"title": "rs_types.pRS2_devices_changed_callback", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_devices_changed_callback"},
     {"title": "rs_types.RS2_devices_changed_callback", "text": "    ", "tags": "", "url": "rs_types.html#RS2_devices_changed_callback"},
     {"title": "rs_types.prs2_update_progress_callback_ptr", "text": "   ", "tags": "", "url": "rs_types.html#prs2_update_progress_callback_ptr"},
     {"title": "rs_types.rs2_update_progress_callback_ptr", "text": "    ", "tags": "", "url": "rs_types.html#rs2_update_progress_callback_ptr"},
     {"title": "rs_types.pRS2_notification_callback_ptr", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_notification_callback_ptr"},
     {"title": "rs_types.rs2_notification_callback_ptr", "text": "    ", "tags": "", "url": "rs_types.html#rs2_notification_callback_ptr"},
     {"title": "rs_types.Trs2_exception_type", "text": "Exception types are the different categories of errors that RealSense API might return. */    RS2_EXCEPTION_TYPE_UNKNOWN    RS2_EXCEPTION_TYPE_CAMERA_DISCONNECTED  Device was disconnected, this can be caused by outside intervention, by internal firmware error or due to insufficient power  RS2_EXCEPTION_TYPE_BACKEND  Error was returned from the underlying OS-specific layer  RS2_EXCEPTION_TYPE_INVALID_VALUE  Invalid value was passed to the API  RS2_EXCEPTION_TYPE_WRONG_API_CALL_SEQUENCE  Function precondition was violated  RS2_EXCEPTION_TYPE_NOT_IMPLEMENTED  The method is not implemented at this point  RS2_EXCEPTION_TYPE_DEVICE_IN_RECOVERY_MODE  Device is in recovery mode and might require firmware update  RS2_EXCEPTION_TYPE_IO  IO Device failure  RS2_EXCEPTION_TYPE_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops. ", "tags": "", "url": "rs_types.html#Trs2_exception_type"},
     {"title": "rs_types.pRS2_motion_device_intrinsic", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_motion_device_intrinsic"},
     {"title": "rs_types.pRS2_dsm_params", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_dsm_params"},
     {"title": "rs_types.Trs2_stream", "text": "Streams are different types of data provided by RealSense devices.    RS2_STREAM_ANY    RS2_STREAM_DEPTH  Native stream of depth data produced by RealSense device */  RS2_STREAM_COLOR  Native stream of color data captured by RealSense device */  RS2_STREAM_INFRARED  Native stream of infrared data captured by RealSense device */  RS2_STREAM_FISHEYE  Native stream of fish-eye (wide) data captured from the dedicate motion camera */  RS2_STREAM_GYRO  Native stream of gyroscope motion data produced by RealSense device */  RS2_STREAM_ACCEL  Native stream of accelerometer motion data produced by RealSense device */  RS2_STREAM_GPIO  Signals from external device connected through GPIO */  RS2_STREAM_POSE  6 Degrees of Freedom pose data, calculated by RealSense device */  RS2_STREAM_CONFIDENCE  4 bit per-pixel depth confidence level */  RS2_STREAM_COUNT   ", "tags": "", "url": "rs_types.html#Trs2_stream"},
     {"title": "rs_types.prs2_stream", "text": "   ", "tags": "", "url": "rs_types.html#prs2_stream"},
     {"title": "rs_types.pRS2_pose", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_pose"},
     {"title": "rs_types.Trs2_log_severity", "text": "brief Severity of the librealsense logger.    RS2_LOG_SEVERITY_DEBUG  Detailed information about ordinary operations  RS2_LOG_SEVERITY_INFO  Terse information about ordinary operations  RS2_LOG_SEVERITY_WARN  Indication of possible failure  RS2_LOG_SEVERITY_ERROR  Indication of definite failure  RS2_LOG_SEVERITY_FATAL  Indication of unrecoverable failure  RS2_LOG_SEVERITY_NONE  No logging will occur  RS2_LOG_SEVERITY_COUNT  Number of enumeration values. Not a valid input: intended to be used in for-loops.  RS2_LOG_SEVERITY_ALL   ", "tags": "", "url": "rs_types.html#Trs2_log_severity"},
     {"title": "rs_types.pRS2_vertex", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_vertex"},
     {"title": "rs_types.pRS2_pixel", "text": "   ", "tags": "", "url": "rs_types.html#pRS2_pixel"}
]};
